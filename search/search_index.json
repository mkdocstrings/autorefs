{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"mkdocs-autorefs","text":"<p>Automatically link across pages in MkDocs.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install mkdocs-autorefs\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<pre><code># mkdocs.yml\nplugins:\n- search\n- autorefs\n</code></pre> <p>In one of your Markdown files (e.g. <code>doc1.md</code>) create some headings:</p> <pre><code>## Hello, world!\n\n## Another heading\n\nLink to [Hello, World!](#hello-world) on the same page.\n</code></pre> <p>This is a normal link to an anchor. MkDocs generates anchors for each heading, and they can always be used to link to something, either within the same page (as shown here) or by specifying the path of the other page.</p> <p>But with this plugin, you can link to a heading from any other page on the site without needing to know the path of either of the pages, just the heading title itself.</p> <p>Let's create another Markdown page to try this, <code>subdir/doc2.md</code>:</p> <pre><code>We can [link to that heading][hello-world] from another page too.\n\nThis works the same as [a normal link to that heading](../doc1.md#hello-world).\n</code></pre> <p>Linking to a heading without needing to know the destination page can be useful if specifying that path is cumbersome, e.g. when the pages have deeply nested paths, are far apart, or are moved around frequently.</p>"},{"location":"#non-unique-headings","title":"Non-unique headings","text":"<p>When linking to a heading that appears several times throughout the site, this plugin will log a warning message stating that multiple URLs were found and that headings should be made unique, and will resolve the link using the first found URL.</p> <p>To prevent getting warnings, use Markdown anchors to add unique aliases to your headings, and use these aliases when referencing the headings.</p> <p>If you cannot use Markdown anchors, for example because you inject the same generated contents in multiple locations (for example mkdocstrings' API documentation), then you can try to alleviate the warnings by enabling the <code>resolve_closest</code> option:</p> <pre><code>plugins:\n- autorefs:\n    resolve_closest: true\n</code></pre> <p>When <code>resolve_closest</code> is enabled, and multiple URLs are found for the same identifier, the plugin will try to resolve to the one that is \"closest\" to the current page (the page containing the link). By closest, we mean:</p> <ul> <li>URLs that are relative to the current page's URL, climbing up parents</li> <li>if multiple URLs are relative to it, use the one at the shortest distance if possible.</li> </ul> <p>If multiple relative URLs are at the same distance, the first of these URLs will be used. If no URL is relative to the current page's URL, the first URL of all found URLs will be used.</p> <p>Examples:</p> Current page Candidate URLs Relative URLs Winner <code></code> <code>x/#b</code>, <code>#b</code> <code>#b</code> <code>#b</code> (only one relative) <code>a/</code> <code>b/c/#d</code>, <code>c/#d</code> none <code>b/c/#d</code> (no relative, use first one, even if longer distance) <code>a/b/</code> <code>x/#e</code>, <code>a/c/#e</code>, <code>a/d/#e</code> <code>a/c/#e</code>, <code>a/d/#e</code> (relative to parent <code>a/</code>) <code>a/c/#e</code> (same distance, use first one) <code>a/b/</code> <code>x/#e</code>, <code>a/c/d/#e</code>, <code>a/c/#e</code> <code>a/c/d/#e</code>, <code>a/c/#e</code> (relative to parent <code>a/</code>) <code>a/c/#e</code> (shortest distance) <code>a/b/c/</code> <code>x/#e</code>, <code>a/#e</code>, <code>a/b/#e</code>, <code>a/b/c/d/#e</code>, <code>a/b/c/#e</code> <code>a/b/c/d/#e</code>, <code>a/b/c/#e</code> <code>a/b/c/#e</code> (shortest distance)"},{"location":"#markdown-anchors","title":"Markdown anchors","text":"<p>The autorefs plugin offers a feature called \"Markdown anchors\". Such anchors can be added anywhere in a document, and linked to from any other place.</p> <p>The syntax is:</p> <pre><code>[](){ #id-of-the-anchor }\n</code></pre> <p>If you look closely, it starts with the usual syntax for a link, <code>[]()</code>, except both the text value and URL of the link are empty. Then we see <code>{ #id-of-the-anchor }</code>, which is the syntax supported by the <code>attr_list</code> extension. It sets an HTML id to the anchor element. The autorefs plugin simply gives a meaning to such anchors with ids. Note that raw HTML anchors like <code>&lt;a id=\"foo\"&gt;&lt;/a&gt;</code> are not supported.</p> <p>The <code>attr_list</code> extension must be enabled for the Markdown anchors feature to work:</p> <pre><code># mkdocs.yml\nplugins:\n- search\n- autorefs\n\nmarkdown_extensions:\n- attr_list\n</code></pre> <p>Now, you can add anchors to documents:</p> <pre><code>Somewhere in a document.\n\n[](){ #foobar-paragraph }\n\nParagraph about foobar.\n</code></pre> <p>...making it possible to link to this anchor with our automatic links:</p> <pre><code>In any document.\n\nCheck out the [paragraph about foobar][foobar-paragraph].\n</code></pre> <p>If you add a Markdown anchor right above a heading, this anchor will redirect to the heading itself:</p> <pre><code>[](){ #foobar }\n## A verbose title about foobar\n</code></pre> <p>Linking to the <code>foobar</code> anchor will bring you directly to the heading, not the anchor itself, so the URL will show <code>#a-verbose-title-about-foobar</code> instead of <code>#foobar</code>. These anchors therefore act as \"aliases\" for headings. It is possible to define multiple aliases per heading:</p> <pre><code>[](){ #contributing }\n[](){ #development-setup }\n## How to contribute to the project?\n</code></pre> <p>Such aliases are especially useful when the same headings appear in several different pages. Without aliases, linking to the heading is undefined behavior (it could lead to any one of the headings). With unique aliases above headings, you can make sure to link to the right heading.</p> <p>For example, consider the following setup. You have one document per operating system describing how to install a project with the OS package manager or from sources:</p> <pre><code>\ud83d\udcc1 docs/\n\u2514\u2500\u2500 \ud83d\udcc1 install/\n    \u251c\u2500\u2500  arch.md\n    \u251c\u2500\u2500  debian.md\n    \u2514\u2500\u2500  gentoo.md\n</code></pre> <p>Each page has:</p> <pre><code>## Install with package manager\n...\n\n## Install from sources\n...\n</code></pre> <p>You don't want to change headings and make them redundant, like <code>## Arch: Install with package manager</code> and <code>## Debian: Install with package manager</code> just to be able to reference the right one with autorefs. Instead you can do this:</p> <pre><code>[](){ #arch-install-pkg }\n## Install with package manager\n...\n\n[](){ #arch-install-src }\n## Install from sources\n...\n</code></pre> <p>...changing <code>arch</code> by <code>debian</code>, <code>gentoo</code>, etc. in the other pages.</p> <p>You can also change the actual identifier of a heading, thanks again to the <code>attr_list</code> Markdown extension:</p> <pre><code>## Install from sources { #arch-install-src }\n...\n</code></pre> <p>...though note that this will impact the URL anchor too (and therefore the permalink to the heading).</p>"},{"location":"#link-titles","title":"Link titles","text":"<p>When rendering cross-references, the autorefs plugin sets <code>title</code> HTML attributes on links. These titles are displayed as tooltips when hovering on links. For mandatory cross-references (user-written ones), the original title of the target section is used as tooltip, for example: <code>Original title</code>. For optional cross-references (typically rendered by mkdocstrings handlers), the identifier is appended to the original title, for example: <code>Original title (package.module.function)</code>. This is useful to indicate the fully qualified name of API objects.</p> <p>Since the presence of titles prevents the instant preview feature of Material for MkDocs from working, the autorefs plugin will detect when this theme and feature are used, and only set titles on external links (for which instant previews cannot work).</p> <p>If you want to force autorefs to always set titles, never set titles, or only set titles on external links, you can use the <code>link_titles</code> option:</p> <pre><code>plugins:\n- autorefs:\n    link_titles: external\n    # link_titles: true\n    # link_titles: false\n    # link_titles: auto  # default\n</code></pre> <p>By default, HTML tags are only preserved in titles if the current theme in use is Material for MkDocs and its <code>content.tooltips</code> feature is enabled. If your chosen theme does support HTML tags in titles, you can prevent tags stripping with the <code>strip_title_tags</code> option:</p> <pre><code>plugins:\n- autorefs:\n    strip_title_tags: false\n    # strip_title_tags: true\n    # strip_title_tags: auto  # default\n</code></pre>"},{"location":"#backlinks","title":"Backlinks","text":"<p>The autorefs plugin supports recording backlinks, that other plugins or systems can then use to render backlinks into pages.</p> <p>For example, when linking from page <code>foo/</code>, section <code>Section</code> to a heading with identifier <code>heading</code> thanks to a cross-reference <code>[Some heading][heading]</code>, the plugin will record that <code>foo/#section</code> references <code>heading</code>.</p> <pre><code># Page foo\n\nThis is page foo.\n\n## Section\n\nThis section references [some heading][heading].\n</code></pre> <p>The <code>record_backlinks</code> attribute of the autorefs plugin must be set to true before Markdown is rendered to HTML to enable backlinks recording. This is typically done in an <code>on_config</code> MkDocs hook:</p> <pre><code>from mkdocs.config.defaults import MkDocsConfig\n\n\ndef on_config(config: MkDocsConfig) -&gt; MkDocsConfig | None:\n    config.plugins[\"autorefs\"].record_backlinks = True\n    return config\n</code></pre> <p>Note that for backlinks to be recorded with accurate URLs, headings must have HTML IDs, meaning either the <code>toc</code> extension must be enabled, or the <code>attr_list</code> extension must be enabled and authors must add IDs to the relevant headings, with the <code>## Heading { #heading-id }</code> syntax.</p> <p>Other plugins or systems integrating with the autorefs plugin can then retrieve backlinks for a specific identifier:</p> <pre><code>backlinks = autorefs_plugin.get_backlinks(\"heading\")\n</code></pre> <p>The <code>get_backlinks</code> method returns a map of backlink types to sets of backlinks. A backlink is a tuple of navigation breadcrumbs, each breadcrumb having a title and URL.</p> <pre><code>print(backlinks)\n# {\n#  \"referenced-by\": {\n#      Backlink(\n#          crumbs=(\n#              BacklinkCrumb(title=\"Foo\", url=\"foo/\"),\n#              BacklinkCrumb(title=\"Section\", url=\"foo/#section\"),\n#          ),\n#      ),\n#  }\n</code></pre> <p>The default backlink type is <code>referenced-by</code>, but can be customized by other plugins or systems thanks to the <code>backlink-type</code> HTML data attribute on <code>autoref</code> elements. Such plugins and systems can also specify the anchor on the current page to use for the backlink with the <code>backlink-anchor</code> HTML data attribute on <code>autoref</code> elements.</p> <pre><code>&lt;autoref identifier=\"heading\" backlink-type=\"mentionned-by\" backlink-anchor=\"section-paragraph\"&gt;\n</code></pre> <p>This feature is typically designed for use in mkdocstrings handlers, though is not exclusive to mkdocstrings: it can be used by any other plugin or even author hooks. Such a hook is provided as an example here:</p> <pre><code>def on_env(env, /, *, config, files):\n    regex = r\"&lt;backlinks\\s+identifier=\\\"([^\\\"]+)\\\"\\s*/?&gt;\"\n\n    def repl(match: Match) -&gt; str:\n        identifier = match.group(1)\n        backlinks = config.plugin[\"autorefs\"].get_backlinks(identifier, from_url=file.page.url)\n        if not backlinks:\n            return \"\"\n        return \"\".join(_render_backlinks(backlinks))\n\n    for file in files:\n        if file.page and file.page.content:\n            file.page.content = re.sub(regex, repl, file.page.content)\n\n    return env\n\n\n\ndef _render_backlinks(backlinks):\n    yield \"&lt;div&gt;\"\n    for backlink_type, backlink_list in backlinks:\n        yield f\"&lt;b&gt;{verbose_type[backlink_type]}:&lt;/b&gt;\"\n        yield \"&lt;ul&gt;\"\n        for backlink in sorted(backlink_list, key: lambda b: b.crumbs):\n            yield \"&lt;li&gt;\"\n            for crumb in backlink.crumbs:\n                if crumb.url and crumb.title:\n                    yield f'&lt;a href=\"{crumb.url}\"&gt;{crumb.title}&lt;/a&gt;'\n                elif crumb.title:\n                    yield f\"&lt;span&gt;{crumb.title}&lt;/span&gt;\"\n            yield \"&lt;/li&gt;\"\n        yield \"&lt;/ul&gt;\"\n    yield \"&lt;/div&gt;\"\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#142-2025-05-20","title":"1.4.2 - 2025-05-20","text":"<p>Compare with 1.4.1</p>"},{"location":"changelog/#build","title":"Build","text":"<ul> <li>Exclude mypy cache from dists (5e77f7f by Timoth\u00e9e Mazzucotelli). Issue-71</li> </ul>"},{"location":"changelog/#141-2025-03-08","title":"1.4.1 - 2025-03-08","text":"<p>Compare with 1.4.0</p>"},{"location":"changelog/#code-refactoring","title":"Code Refactoring","text":"<ul> <li>Store parent pages and parent sections in backlink breadcrumbs (67955ce by Timoth\u00e9e Mazzucotelli).</li> <li>Ignore Markdown anchors when setting backlink metadata on autorefs (3ac4797 by Timoth\u00e9e Mazzucotelli).</li> <li>Handle absence of <code>#</code> when computing relative URLs (ca6461e by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#140-2025-02-24","title":"1.4.0 - 2025-02-24","text":"<p>Compare with 1.3.1</p>"},{"location":"changelog/#features","title":"Features","text":"<ul> <li>Add backlinks feature (5a3b387 by Timoth\u00e9e Mazzucotelli). PR-65, Issue-mkdocstrings-723, Issue-mkdocstrings-python-153</li> <li>Add <code>strip_title_tags</code> option (00ce203 and b21aefd by Timoth\u00e9e Mazzucotelli). Issue-33</li> <li>Add <code>link_titles</code> option and adapt related logic (e3b602e by Timoth\u00e9e Mazzucotelli). Issue-33, Issue-62</li> </ul>"},{"location":"changelog/#code-refactoring_1","title":"Code Refactoring","text":"<ul> <li>Move code to internal folder, expose public API in top-level module, document all public objects (9615d13 by Timoth\u00e9e Mazzucotelli).</li> <li>Store actual page instance instead of URL in plugin's <code>current_page</code> attribute (8023588 and 2009f85 by Timoth\u00e9e Mazzucotelli).</li> <li>Use the <code>on_env</code> hook to fix cross-references (70fec3e by Timoth\u00e9e Mazzucotelli). Discussion-mkdocs-3917</li> <li>Record heading titles alongside URLs (791782e by Timoth\u00e9e Mazzucotelli). Issue-33</li> </ul>"},{"location":"changelog/#131-2025-02-11","title":"1.3.1 - 2025-02-11","text":"<p>Compare with 1.3.0</p>"},{"location":"changelog/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Always resolve secondary URLs to closest (don't log warnings) (243ad35 by Timoth\u00e9e Mazzucotelli). Issue-52</li> </ul>"},{"location":"changelog/#130-2025-01-12","title":"1.3.0 - 2025-01-12","text":"<p>Compare with 1.2.0</p>"},{"location":"changelog/#build_1","title":"Build","text":"<ul> <li>Drop support for Python 3.8 (ee3eaad by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#features_1","title":"Features","text":"<ul> <li>Handle inline references with markup within them (54a02a7 by Timoth\u00e9e Mazzucotelli). Follow-up-of-issue-58</li> <li>Separate URLs in two groups, primary and secondary (559c723 by Timoth\u00e9e Mazzucotelli). Related-to-issue-61</li> </ul>"},{"location":"changelog/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>Fallback to slugified title as id for non-exact, non-code references (<code>[Hello World][]</code> -&gt; <code>[hello-world][]</code>) (13428f1 by Timoth\u00e9e Mazzucotelli). Issue-58</li> </ul>"},{"location":"changelog/#code-refactoring_2","title":"Code Refactoring","text":"<ul> <li>Deprecate fallback mechanism (5e89cd8 by Timoth\u00e9e Mazzucotelli). Issue-61</li> <li>Log a debug message for unresolved optional references (9e990d7 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#120-2024-09-01","title":"1.2.0 - 2024-09-01","text":"<p>Compare with 1.1.0</p>"},{"location":"changelog/#features_2","title":"Features","text":"<ul> <li>Provide hook interface, use it to expand identifiers, attach additional context to references, and give more context around unmapped identifiers (fb8df98 by Timoth\u00e9e Mazzucotelli). Issue-54, PR-mkdocstrings#666</li> <li>Add option to resolve autorefs to closest URLs when multiple ones are found (2916eb2 by Timoth\u00e9e Mazzucotelli). Issue-52</li> </ul>"},{"location":"changelog/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>Don't ignore identifiers containing spaces and slashes (b36a0d1 by Timoth\u00e9e Mazzucotelli). Issue-55</li> </ul>"},{"location":"changelog/#code-refactoring_3","title":"Code Refactoring","text":"<ul> <li>Emit deprecation warnings when old-style spans are found (4f2be46 by Timoth\u00e9e Mazzucotelli).</li> <li>Use <code>%s</code> formatting instead of f-strings in log messages (0cedf9d by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#110-2024-08-20","title":"1.1.0 - 2024-08-20","text":"<p>Compare with 1.0.1</p>"},{"location":"changelog/#deprecations","title":"Deprecations","text":"<ul> <li><code>AUTO_REF_RE</code> is renamed <code>AUTOREF_RE</code> (and updated for an improved version of <code>fix_refs</code>)</li> <li><code>AutoRefInlineProcessor</code> is renamed <code>AutorefsInlineProcessor</code></li> </ul>"},{"location":"changelog/#features_3","title":"Features","text":"<ul> <li>Warn when multiple URLs are found for the same identifier (c630354 by Markus B). Issue-35, PR-50, Co-authored-by: Timoth\u00e9e Mazzucotelli dev@pawamoy.fr</li> </ul>"},{"location":"changelog/#bug-fixes_3","title":"Bug Fixes","text":"<ul> <li>Only log \"Markdown anchors feature enabled\" once (1c9bda1 by Timoth\u00e9e Mazzucotelli). Issue-44</li> </ul>"},{"location":"changelog/#code-refactoring_4","title":"Code Refactoring","text":"<ul> <li>Use a custom autoref HTML tag (e142023 by Timoth\u00e9e Mazzucotelli). PR-48</li> <li>Rename AutoRefInlineProcessor to AutorefsInlineProcessor (ffcaa01 by Timoth\u00e9e Mazzucotelli).</li> <li>Attach name to processors for easier retrieval (036b825 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#101-2024-02-29","title":"1.0.1 - 2024-02-29","text":"<p>Compare with 1.0.0</p>"},{"location":"changelog/#bug-fixes_4","title":"Bug Fixes","text":"<ul> <li>Don't import <code>MkDocsConfig</code> (does not exist on MkDocs 1.3-) (9c15664 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#100-2024-02-27","title":"1.0.0 - 2024-02-27","text":"<p>Compare with 0.5.0</p>"},{"location":"changelog/#features_4","title":"Features","text":"<ul> <li>Add Markdown anchors and aliases (a215a97 by Timoth\u00e9e Mazzucotelli). Replaces-PR-#20, Related-to-PR-#25, Related-to-issue-#35, Co-authored-by: Oleh Prypin oleh@pryp.in, Co-authored-by: tvdboom m.524687@gmail.com</li> <li>Preserve HTML data attributes (from spans to anchors) (0c1781d by Timoth\u00e9e Mazzucotelli). Issue-#41, PR-#42, Co-authored-by: Oleh Prypin oleh@pryp.in</li> <li>Support <code>[`identifier`][]</code> with pymdownx.inlinehilite enabled (e7f2228 by Oleh Prypin). Issue-#34, PR-#40, Co-authored-by: Timoth\u00e9e Mazzucotelli dev@pawamoy.fr</li> </ul>"},{"location":"changelog/#bug-fixes_5","title":"Bug Fixes","text":"<ul> <li>Recognize links with multi-line text (225a6f2 by Oleh Prypin). Issue #31, PR #32</li> </ul>"},{"location":"changelog/#050-2023-08-02","title":"0.5.0 - 2023-08-02","text":"<p>Compare with 0.4.1</p>"},{"location":"changelog/#breaking-changes","title":"Breaking Changes","text":"<ul> <li>Drop support for Python 3.7</li> </ul>"},{"location":"changelog/#build_2","title":"Build","text":"<ul> <li>Migrate to pdm-backend (48b92fb by Micha\u0142 G\u00f3rny).</li> </ul>"},{"location":"changelog/#bug-fixes_6","title":"Bug Fixes","text":"<ul> <li>Stop using deprecated <code>warning_filter</code> (7721103 by Kyle King). PR #30</li> </ul>"},{"location":"changelog/#code-refactoring_5","title":"Code Refactoring","text":"<ul> <li>Use new MkDocs plugin logger if available (ca8d758 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#041-2022-03-07","title":"0.4.1 - 2022-03-07","text":"<p>Compare with 0.4.0</p>"},{"location":"changelog/#bug-fixes_7","title":"Bug Fixes","text":"<ul> <li>Fix packaging (missing <code>__init__</code> module) (de0670b by Timoth\u00e9e Mazzucotelli). Issue #17, issue mkdocstrings/mkdocstrings#398, PR #18</li> </ul>"},{"location":"changelog/#040-2022-03-07","title":"0.4.0 - 2022-03-07","text":"<p>Compare with 0.3.1</p>"},{"location":"changelog/#features_5","title":"Features","text":"<ul> <li>Add HTML classes to references: <code>autorefs</code> always, and <code>autorefs-internal</code> or <code>autorefs-external</code> depending on the link (39db59d by Timoth\u00e9e Mazzucotelli). PR #16</li> </ul>"},{"location":"changelog/#bug-fixes_8","title":"Bug Fixes","text":"<ul> <li>Don't compute relative URLs of already relative ones (f6b861c by Timoth\u00e9e Mazzucotelli). PR #15</li> </ul>"},{"location":"changelog/#031-2021-12-27","title":"0.3.1 - 2021-12-27","text":"<p>Compare with 0.3.0</p>"},{"location":"changelog/#code-refactoring_6","title":"Code Refactoring","text":"<ul> <li>Support fallback method returning multiple identifiers (0d2b411 by Timoth\u00e9e Mazzucotelli). Issue #11, PR #12 and mkdocstrings#350</li> </ul>"},{"location":"changelog/#030-2021-07-24","title":"0.3.0 - 2021-07-24","text":"<p>Compare with 0.2.1</p>"},{"location":"changelog/#features_6","title":"Features","text":"<ul> <li>Add optional-hover ref type (0288bdd by Brian Koropoff). PR #10</li> </ul>"},{"location":"changelog/#021-2021-05-07","title":"0.2.1 - 2021-05-07","text":"<p>Compare with 0.2.0</p>"},{"location":"changelog/#bug-fixes_9","title":"Bug Fixes","text":"<ul> <li>Prevent error during parallel installations (c90e399 by Timoth\u00e9e Mazzucotelli). PR #9</li> </ul>"},{"location":"changelog/#020-2021-05-03","title":"0.2.0 - 2021-05-03","text":"<p>Compare with 0.1.1</p>"},{"location":"changelog/#features_7","title":"Features","text":"<ul> <li>Allow registering absolute URLs for autorefs (621686b by Oleh Prypin). PR #8</li> <li>Allow external tools to insert references that are OK to skip (7619c28 by Oleh Prypin). PR #7</li> <li>Allow <code>[``identifier``][]</code>, understood as <code>[``identifier``][identifier]</code> (2d3182d by Oleh Prypin). PR #5</li> </ul>"},{"location":"changelog/#011-2021-02-28","title":"0.1.1 - 2021-02-28","text":"<p>Compare with 0.1.0</p>"},{"location":"changelog/#packaging","title":"Packaging","text":"<ul> <li>Remove unused dependencies (9c6a8e6 by Oleh Prypin).</li> </ul>"},{"location":"changelog/#010-2021-02-17","title":"0.1.0 - 2021-02-17","text":"<p>Compare with first commit</p>"},{"location":"changelog/#features_8","title":"Features","text":"<ul> <li>Split out \"mkdocs-autorefs\" plugin from \"mkdocstrings\" (fe6faa5 by Oleh Prypin).</li> </ul>"},{"location":"code_of_conduct/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email address, without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a professional setting</li> </ul>"},{"location":"code_of_conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at dev@pawamoy.fr. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"code_of_conduct/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"code_of_conduct/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"code_of_conduct/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"code_of_conduct/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"code_of_conduct/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p>"},{"location":"contributing/#environment-setup","title":"Environment setup","text":"<p>Nothing easier!</p> <p>Fork and clone the repository, then:</p> <pre><code>cd mkdocs-autorefs\nmake setup\n</code></pre> <p>Note</p> <p>If it fails for some reason, you'll need to install uv manually.</p> <p>You can install it with:</p> <pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre> <p>Now you can try running <code>make setup</code> again, or simply <code>uv sync</code>.</p> <p>You now have the dependencies installed.</p> <p>Run <code>make help</code> to see all the available actions!</p>"},{"location":"contributing/#tasks","title":"Tasks","text":"<p>The entry-point to run commands and tasks is the <code>make</code> Python script, located in the <code>scripts</code> directory. Try running <code>make</code> to show the available commands and tasks. The commands do not need the Python dependencies to be installed, while the tasks do. The cross-platform tasks are written in Python, thanks to duty.</p> <p>If you work in VSCode, we provide an action to configure VSCode for the project.</p>"},{"location":"contributing/#development","title":"Development","text":"<p>As usual:</p> <ol> <li>create a new branch: <code>git switch -c feature-or-bugfix-name</code></li> <li>edit the code and/or the documentation</li> </ol> <p>Before committing:</p> <ol> <li>run <code>make format</code> to auto-format the code</li> <li>run <code>make check</code> to check everything (fix any warning)</li> <li>run <code>make test</code> to run the tests (fix any issue)</li> <li>if you updated the documentation or the project dependencies:<ol> <li>run <code>make docs</code></li> <li>go to http://localhost:8000 and check that everything looks good</li> </ol> </li> <li>follow our commit message convention</li> </ol> <p>If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review.</p> <p>Don't bother updating the changelog, we will take care of this.</p>"},{"location":"contributing/#commit-message-convention","title":"Commit message convention","text":"<p>Commit messages must follow our convention based on the Angular style or the Karma convention:</p> <pre><code>&lt;type&gt;[(scope)]: Subject\n\n[Body]\n</code></pre> <p>Subject and body must be valid Markdown. Subject must have proper casing (uppercase for first letter if it makes sense), but no dot at the end, and no punctuation in general.</p> <p>Scope and body are optional. Type can be:</p> <ul> <li><code>build</code>: About packaging, building wheels, etc.</li> <li><code>chore</code>: About packaging or repo/files management.</li> <li><code>ci</code>: About Continuous Integration.</li> <li><code>deps</code>: Dependencies update.</li> <li><code>docs</code>: About documentation.</li> <li><code>feat</code>: New feature.</li> <li><code>fix</code>: Bug fix.</li> <li><code>perf</code>: About performance.</li> <li><code>refactor</code>: Changes that are not features or bug fixes.</li> <li><code>style</code>: A change in code style/format.</li> <li><code>tests</code>: About tests.</li> </ul> <p>If you write a body, please add trailers at the end (for example issues and PR references, or co-authors), without relying on GitHub's flavored Markdown:</p> <pre><code>Body.\n\nIssue #10: https://github.com/namespace/project/issues/10\nRelated to PR namespace/other-project#15: https://github.com/namespace/other-project/pull/15\n</code></pre> <p>These \"trailers\" must appear at the end of the body, without any blank lines between them. The trailer title can contain any character except colons <code>:</code>. We expect a full URI for each trailer, not just GitHub autolinks (for example, full GitHub URLs for commits and issues, not the hash or the #issue-number).</p> <p>We do not enforce a line length on commit messages summary and body, but please avoid very long summaries, and very long lines in the body, unless they are part of code blocks that must not be wrapped.</p>"},{"location":"contributing/#pull-requests-guidelines","title":"Pull requests guidelines","text":"<p>Link to any related issue in the Pull Request message.</p> <p>During the review, we recommend using fixups:</p> <pre><code># SHA is the SHA of the commit you want to fix\ngit commit --fixup=SHA\n</code></pre> <p>Once all the changes are approved, you can squash your commits:</p> <pre><code>git rebase -i --autosquash main\n</code></pre> <p>And force-push:</p> <pre><code>git push -f\n</code></pre> <p>If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.</p>"},{"location":"credits/","title":"Credits","text":""},{"location":"credits/#exec-2--credits","title":"Credits","text":"<p>These projects were used to build mkdocs-autorefs. Thank you!</p> <p>Python | uv | copier-uv</p>"},{"location":"credits/#exec-2--runtime-dependencies","title":"Runtime dependencies","text":"Project Summary Version (accepted) Version (last resolved) License click Composable command line interface toolkit <code>&gt;=7.0</code> <code>8.2.0</code> BSD-3-Clause colorama Cross-platform colored terminal text. <code>&gt;=0.4</code> <code>0.4.6</code> BSD License ghp-import Copy your docs directly to the gh-pages branch. <code>&gt;=1.0</code> <code>2.1.0</code> Apache Software License Jinja2 A very fast and expressive template engine. <code>&gt;=2.11.1, &gt;=2.10</code> <code>3.1.6</code> BSD License Markdown Python implementation of John Gruber's Markdown. <code>&gt;=3.6, &gt;=3.3</code> <code>3.8</code> BSD-3-Clause MarkupSafe Safely add untrusted strings to HTML/XML markup. <code>&gt;=2.0.1, &gt;=2.0</code> <code>3.0.2</code> BSD License mergedeep A deep merge function for \ud83d\udc0d. <code>~=1.3, &gt;=1.3.4</code> <code>1.3.4</code> MIT License mkdocs Project documentation with Markdown. <code>&gt;=1.6, &gt;=1.1</code> <code>1.6.1</code> BSD-2-Clause mkdocs-get-deps MkDocs extension that lists all dependencies according to a mkdocs.yml file <code>&gt;=0.2.0</code> <code>0.2.0</code> MIT packaging Core utilities for Python packages <code>&gt;=24.0, &gt;=20.5</code> <code>25.0</code> Apache Software License + BSD License pathspec Utility library for gitignore style pattern matching of file paths. <code>&gt;=0.11.1</code> <code>0.12.1</code> Mozilla Public License 2.0 (MPL 2.0) platformdirs A small Python package for determining appropriate platform-specific dirs, e.g. a <code>user data dir</code>. <code>&gt;=2.2.0</code> <code>4.3.8</code> MIT python-dateutil Extensions to the standard Python datetime module <code>&gt;=2.8.1</code> <code>2.9.0.post0</code> BSD License + Apache Software License PyYAML YAML parser and emitter for Python <code>&gt;=5.1</code> <code>6.0.2</code> MIT pyyaml_env_tag A custom YAML tag for referencing environment variables in YAML files. <code>&gt;=0.1</code> <code>1.1</code> MIT six Python 2 and 3 compatibility utilities <code>&gt;=1.5, &gt;=1.15, &lt;2</code> <code>1.17.0</code> MIT watchdog Filesystem events monitoring <code>&gt;=2.0</code> <code>6.0.0</code> Apache-2.0"},{"location":"credits/#exec-2--development-dependencies","title":"Development dependencies","text":"Project Summary Version (accepted) Version (last resolved) License ansimarkup Produce colored terminal text with an xml-like markup <code>~=1.4</code> <code>1.5.0</code> Revised BSD License appdirs A small Python module for determining appropriate platform-specific dirs, e.g. a \"user data dir\". <code>&gt;=1.4</code> <code>1.4.4</code> MIT babel Internationalization utilities <code>&gt;=2.7.0</code> <code>2.17.0</code> BSD-3-Clause backrefs A wrapper around re and regex that adds additional back references. <code>~=5.7.post1</code> <code>5.8</code> MIT beautifulsoup4 Screen-scraping library <code>&gt;=4.12</code> <code>4.13.4</code> MIT License build A simple, correct Python build frontend <code>&gt;=1.2</code> <code>1.2.2.post1</code> MIT License cappa Declarative CLI argument parser. <code>&gt;=0.22</code> <code>0.27.2</code> ? certifi Python package for providing Mozilla's CA Bundle. <code>&gt;=2017.4.17</code> <code>2025.4.26</code> MPL-2.0 cffi Foreign Function Interface for Python calling C code. <code>&gt;=1.14</code> <code>1.17.1</code> MIT charset-normalizer The Real First Universal Charset Detector. Open, modern and actively maintained alternative to Chardet. <code>&gt;=2, &lt;4</code> <code>3.4.2</code> MIT click Composable command line interface toolkit <code>&gt;=7.0</code> <code>8.2.0</code> BSD-3-Clause colorama Cross-platform colored terminal text. <code>&gt;=0.4</code> <code>0.4.6</code> BSD License coverage Code coverage measurement for Python <code>&gt;=7.5</code> <code>7.8.0</code> Apache-2.0 cryptography cryptography is a package which provides cryptographic recipes and primitives to Python developers. <code>&gt;=2.0</code> <code>45.0.2</code> Apache-2.0 OR BSD-3-Clause csscompressor A python port of YUI CSS Compressor <code>&gt;=0.9.5</code> <code>0.9.5</code> BSD docutils Docutils -- Python Documentation Utilities <code>&gt;=0.21.2</code> <code>0.21.2</code> Public Domain + Python Software Foundation License + BSD License + GNU General Public License (GPL) duty A simple task runner. <code>&gt;=1.6</code> <code>1.6.0</code> ISC execnet execnet: rapid multi-Python deployment <code>&gt;=2.1</code> <code>2.1.1</code> MIT failprint Run a command, print its output only if it fails. <code>&gt;=0.11, !=1.0.0</code> <code>1.0.3</code> ISC ghp-import Copy your docs directly to the gh-pages branch. <code>&gt;=1.0</code> <code>2.1.0</code> Apache Software License git-changelog Automatic Changelog generator using Jinja2 templates. <code>&gt;=2.5</code> <code>2.5.3</code> ISC gitdb Git Object Database <code>&gt;=4.0.1, &lt;5</code> <code>4.0.12</code> BSD License GitPython GitPython is a Python library used to interact with Git repositories <code>&gt;=3.1.44</code> <code>3.1.44</code> BSD-3-Clause griffe Signatures for entire Python programs. Extract the structure, the frame, the skeleton of your project, to generate API documentation or find breaking changes in your API. <code>&gt;=1.6.2</code> <code>1.7.3.1.3.1</code> ISC htmlmin2 An HTML Minifier <code>&gt;=0.1.13</code> <code>0.1.13</code> BSD humanize Python humanize utilities <code>&gt;=4.9</code> <code>4.12.3</code> MIT id A tool for generating OIDC identities <code>1.5.0</code> Apache Software License idna Internationalized Domain Names in Applications (IDNA) <code>&gt;=2.5, &lt;4</code> <code>3.10</code> BSD License iniconfig brain-dead simple config-ini parsing <code>2.1.0</code> MIT jaraco.classes Utility functions for Python class constructs <code>3.4.0</code> MIT License jaraco.context Useful decorators and context managers <code>6.0.1</code> MIT License jaraco.functools Functools like those found in stdlib <code>4.1.0</code> MIT License jeepney Low-level, pure Python DBus protocol wrapper. <code>&gt;=0.4.2</code> <code>0.9.0</code> MIT Jinja2 A very fast and expressive template engine. <code>&gt;=2.11.1, &gt;=2.10</code> <code>3.1.6</code> BSD License jsmin JavaScript minifier. <code>&gt;=3.0.1</code> <code>3.0.1</code> MIT License keyring Store and access your passwords safely. <code>&gt;=15.1</code> <code>25.6.0</code> MIT License Markdown Python implementation of John Gruber's Markdown. <code>&gt;=3.6, &gt;=3.3</code> <code>3.8</code> BSD-3-Clause markdown-callouts Markdown extension: a classier syntax for admonitions <code>&gt;=0.4</code> <code>0.4.0</code> MIT markdown-exec Utilities to execute code blocks in Markdown files. <code>&gt;=1.8</code> <code>1.10.3.1.1.0</code> ISC markdown-it-py Python port of markdown-it. Markdown parsing, done right! <code>&gt;=2.2.0</code> <code>3.0.0</code> MIT License markdownify Convert HTML to markdown. <code>&gt;=0.14</code> <code>1.1.0</code> MIT License MarkupSafe Safely add untrusted strings to HTML/XML markup. <code>&gt;=2.0.1, &gt;=2.0</code> <code>3.0.2</code> BSD License mdformat CommonMark compliant Markdown formatter <code>&gt;=0.7.21</code> <code>0.7.22</code> MIT License mdurl Markdown URL utilities <code>~=0.1</code> <code>0.1.2</code> MIT License mergedeep A deep merge function for \ud83d\udc0d. <code>~=1.3, &gt;=1.3.4</code> <code>1.3.4</code> MIT License mkdocs Project documentation with Markdown. <code>&gt;=1.6, &gt;=1.1</code> <code>1.6.1</code> BSD-2-Clause mkdocs-coverage MkDocs plugin to integrate your coverage HTML report into your site. <code>&gt;=1.0</code> <code>1.1.0</code> ISC mkdocs-get-deps MkDocs extension that lists all dependencies according to a mkdocs.yml file <code>&gt;=0.2.0</code> <code>0.2.0</code> MIT mkdocs-git-revision-date-localized-plugin Mkdocs plugin that enables displaying the localized date of the last git modification of a markdown file. <code>&gt;=1.2</code> <code>1.4.5</code> MIT mkdocs-llmstxt MkDocs plugin to generate an /llms.txt file. <code>&gt;=0.2</code> <code>0.2.0</code> ISC mkdocs-material Documentation that simply works <code>&gt;=9.5</code> <code>9.6.14+insiders.4.53.16</code> MIT mkdocs-material-extensions Extension pack for Python Markdown and MkDocs Material. <code>~=1.3</code> <code>1.3.1</code> MIT mkdocs-minify-plugin An MkDocs plugin to minify HTML, JS or CSS files prior to being written to disk <code>&gt;=0.8</code> <code>0.8.0</code> MIT mkdocs-section-index MkDocs plugin to allow clickable sections that lead to an index page <code>&gt;=0.3</code> <code>0.3.10</code> MIT mkdocstrings Automatic documentation from sources, for MkDocs. <code>&gt;=0.29</code> <code>0.29.1</code> ISC mkdocstrings-python A Python handler for mkdocstrings. <code>&gt;=1.16.2</code> <code>1.16.10.1.12.0</code> ISC more-itertools More routines for operating on iterables, beyond itertools <code>10.7.0</code> MIT License mypy Optional static typing for Python <code>&gt;=1.10</code> <code>1.15.0</code> MIT mypy_extensions Type system extensions for programs checked with the mypy type checker. <code>&gt;=1.0.0</code> <code>1.1.0</code> MIT nh3 Python binding to Ammonia HTML sanitizer Rust crate <code>&gt;=0.2.14</code> <code>0.2.21</code> MIT packaging Core utilities for Python packages <code>&gt;=24.0, &gt;=20.5</code> <code>25.0</code> Apache Software License + BSD License paginate Divides large result sets into pages for easier browsing <code>~=0.5</code> <code>0.5.7</code> MIT pathspec Utility library for gitignore style pattern matching of file paths. <code>&gt;=0.11.1</code> <code>0.12.1</code> Mozilla Public License 2.0 (MPL 2.0) platformdirs A small Python package for determining appropriate platform-specific dirs, e.g. a <code>user data dir</code>. <code>&gt;=2.2.0</code> <code>4.3.8</code> MIT pluggy plugin and hook calling mechanisms for python <code>&gt;=1.5, &lt;2</code> <code>1.6.0</code> MIT ptyprocess Run a subprocess in a pseudo terminal <code>~=0.6</code> <code>0.7.0</code> ISC License (ISCL) pycparser C parser in Python <code>2.22</code> BSD-3-Clause Pygments Pygments is a syntax highlighting package written in Python. <code>&gt;=2.5.1</code> <code>2.19.1</code> BSD-2-Clause pymdown-extensions Extension pack for Python Markdown. <code>&gt;=10.14</code> <code>10.15</code> MIT pyproject_hooks Wrappers to call pyproject.toml-based build backend hooks. <code>1.2.0</code> MIT License pytest pytest: simple powerful testing with Python <code>&gt;=8.2</code> <code>8.3.5</code> MIT pytest-cov Pytest plugin for measuring coverage. <code>&gt;=5.0</code> <code>6.1.1</code> MIT pytest-randomly Pytest plugin to randomly order tests and control random.seed. <code>&gt;=3.15</code> <code>3.16.0</code> MIT License pytest-xdist pytest xdist plugin for distributed testing, most importantly across multiple CPUs <code>&gt;=3.6</code> <code>3.6.1</code> MIT License python-dateutil Extensions to the standard Python datetime module <code>&gt;=2.8.1</code> <code>2.9.0.post0</code> BSD License + Apache Software License pytz World timezone definitions, modern and historical <code>&gt;=2025.1</code> <code>2025.2</code> MIT PyYAML YAML parser and emitter for Python <code>&gt;=5.1</code> <code>6.0.2</code> MIT pyyaml_env_tag A custom YAML tag for referencing environment variables in YAML files. <code>&gt;=0.1</code> <code>1.1</code> MIT readme_renderer readme_renderer is a library for rendering readme descriptions for Warehouse <code>&gt;=35.0</code> <code>44.0</code> Apache License, Version 2.0 requests Python HTTP for Humans. <code>&gt;=2.20</code> <code>2.32.3</code> Apache-2.0 requests-toolbelt A utility belt for advanced users of python-requests <code>&gt;=0.8.0, !=0.9.0</code> <code>1.0.0</code> Apache 2.0 rfc3986 Validating URI References per RFC 3986 <code>&gt;=1.4.0</code> <code>2.0.0</code> Apache 2.0 rich Render rich text, tables, progress bars, syntax highlighting, markdown and more to the terminal <code>&gt;=12.0.0</code> <code>14.0.0</code> MIT ruff An extremely fast Python linter and code formatter, written in Rust. <code>&gt;=0.4</code> <code>0.11.10</code> MIT SecretStorage Python bindings to FreeDesktop.org Secret Service API <code>&gt;=3.2</code> <code>3.3.3</code> BSD 3-Clause License semver Python helper for Semantic Versioning (https://semver.org) <code>&gt;=2.13</code> <code>3.0.4</code> BSD License six Python 2 and 3 compatibility utilities <code>&gt;=1.5, &gt;=1.15, &lt;2</code> <code>1.17.0</code> MIT smmap A pure Python implementation of a sliding window memory map manager <code>&gt;=3.0.1, &lt;6</code> <code>5.0.2</code> BSD-3-Clause soupsieve A modern CSS selector implementation for Beautiful Soup. <code>&gt;1.2</code> <code>2.7</code> MIT twine Collection of utilities for publishing packages on PyPI <code>&gt;=5.1</code> <code>6.1.0</code> Apache Software License type-lens type-lens is a Python template project designed to simplify the setup of a new project. <code>&gt;=0.2.3</code> <code>0.2.3</code> MIT types-Markdown Typing stubs for Markdown <code>&gt;=3.6</code> <code>3.8.0.20250415</code> Apache-2.0 types-PyYAML Typing stubs for PyYAML <code>&gt;=6.0</code> <code>6.0.12.20250516</code> Apache-2.0 typing_extensions Backported and Experimental Type Hints for Python 3.8+ <code>&gt;=4.9</code> <code>4.13.2</code> PSF-2.0 urllib3 HTTP library with thread-safe connection pooling, file post, and more. <code>&gt;=1.26.0</code> <code>2.4.0</code> MIT watchdog Filesystem events monitoring <code>&gt;=2.0</code> <code>6.0.0</code> Apache-2.0 yore Manage legacy code with comments. <code>&gt;=0.3.3</code> <code>0.4.3</code> ISC <p>More credits from the author</p>"},{"location":"license/","title":"License","text":"<pre><code>ISC License\n\nCopyright (c) 2019, Oleh Prypin\nCopyright (c) 2019, Timoth\u00e9e Mazzucotelli\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n</code></pre>"},{"location":"reference/api/","title":"API reference","text":""},{"location":"reference/api/#mkdocs_autorefs","title":"mkdocs_autorefs","text":"<p>mkdocs-autorefs package.</p> <p>Automatically link across pages in MkDocs.</p> <p>Modules:</p> <ul> <li> <code>plugin</code>           \u2013            <p>Deprecated. Import from 'mkdocs_autorefs' instead.</p> </li> <li> <code>references</code>           \u2013            <p>Deprecated. Import from 'mkdocs_autorefs' instead.</p> </li> </ul> <p>Classes:</p> <ul> <li> <code>AnchorScannerTreeProcessor</code>           \u2013            <p>Tree processor to scan and register HTML anchors.</p> </li> <li> <code>AutorefsConfig</code>           \u2013            <p>Configuration options for the <code>autorefs</code> plugin.</p> </li> <li> <code>AutorefsExtension</code>           \u2013            <p>Markdown extension that transforms unresolved references into auto-references.</p> </li> <li> <code>AutorefsHookInterface</code>           \u2013            <p>An interface for hooking into how AutoRef handles inline references.</p> </li> <li> <code>AutorefsInlineProcessor</code>           \u2013            <p>A Markdown extension to handle inline references.</p> </li> <li> <code>AutorefsPlugin</code>           \u2013            <p>The <code>autorefs</code> plugin for <code>mkdocs</code>.</p> </li> <li> <code>Backlink</code>           \u2013            <p>A backlink (list of breadcrumbs).</p> </li> <li> <code>BacklinkCrumb</code>           \u2013            <p>A navigation breadcrumb for a backlink.</p> </li> <li> <code>BacklinksTreeProcessor</code>           \u2013            <p>Enhance autorefs with <code>backlink-type</code> and <code>backlink-anchor</code> attributes.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>fix_ref</code>             \u2013              <p>Return a <code>repl</code> function for <code>re.sub</code>.</p> </li> <li> <code>fix_refs</code>             \u2013              <p>Fix all references in the given HTML text.</p> </li> <li> <code>relative_url</code>             \u2013              <p>Compute the relative path from URL A to URL B.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>AUTOREF_RE</code>           \u2013            <p>The autoref HTML tag regular expression.</p> </li> <li> <code>AUTO_REF_RE</code>           \u2013            <p>Deprecated. Use <code>AUTOREF_RE</code> instead.</p> </li> </ul>"},{"location":"reference/api/#mkdocs_autorefs.AUTOREF_RE","title":"AUTOREF_RE  <code>module-attribute</code>","text":"<pre><code>AUTOREF_RE = compile(\n    \"&lt;autoref (?P&lt;attrs&gt;.*?)&gt;(?P&lt;title&gt;.*?)&lt;/autoref&gt;\",\n    flags=DOTALL,\n)\n</code></pre> <p>The autoref HTML tag regular expression.</p> <p>A regular expression to match mkdocs-autorefs' special reference markers in the <code>on_env</code> hook.</p> Referenced by: <ul> <li> <code></code>\u00a0mkdocs_autorefs <code></code>\u00a0AUTO_REF_RE </li> </ul>"},{"location":"reference/api/#mkdocs_autorefs.AUTO_REF_RE","title":"AUTO_REF_RE  <code>module-attribute</code>","text":"<pre><code>AUTO_REF_RE = compile(\n    f\"&lt;span data-(?P&lt;kind&gt;autorefs-(?:identifier|optional|optional-hover))=(?P&lt;identifier&gt;{_ATTR_VALUE})(?: class=(?P&lt;class&gt;{_ATTR_VALUE}))?(?P&lt;attrs&gt; [^&lt;&gt;]+)?&gt;(?P&lt;title&gt;.*?)&lt;/span&gt;\",\n    flags=DOTALL,\n)\n</code></pre> <p>Deprecated. Use <code>AUTOREF_RE</code> instead.</p>"},{"location":"reference/api/#mkdocs_autorefs.AnchorScannerTreeProcessor","title":"AnchorScannerTreeProcessor","text":"<pre><code>AnchorScannerTreeProcessor(\n    plugin: AutorefsPlugin, md: Markdown | None = None\n)\n</code></pre> <p>               Bases: <code>Treeprocessor</code></p> <p>Tree processor to scan and register HTML anchors.</p> <p>Parameters:</p> <ul> <li> <code>plugin</code>               (<code>AutorefsPlugin</code>)           \u2013            <p>A reference to the autorefs plugin, to use its <code>register_anchor</code> method.</p> </li> </ul> Referenced by: <ul> <li> <code></code>\u00a0mkdocs_autorefs <code></code>\u00a0AutorefsExtension <code></code>\u00a0extendMarkdown </li> </ul> <p>Methods:</p> <ul> <li> <code>run</code>             \u2013              <p>Run the tree processor.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The name of the tree processor.</p> </li> </ul> Source code in <code>src/mkdocs_autorefs/_internal/references.py</code> <pre><code>def __init__(self, plugin: AutorefsPlugin, md: Markdown | None = None) -&gt; None:\n    \"\"\"Initialize the tree processor.\n\n    Parameters:\n        plugin: A reference to the autorefs plugin, to use its `register_anchor` method.\n    \"\"\"\n    super().__init__(md)\n    self._plugin = plugin\n</code></pre>"},{"location":"reference/api/#mkdocs_autorefs.AnchorScannerTreeProcessor.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name: str = 'mkdocs-autorefs-anchors-scanner'\n</code></pre> <p>The name of the tree processor.</p>"},{"location":"reference/api/#mkdocs_autorefs.AnchorScannerTreeProcessor.run","title":"run","text":"<pre><code>run(root: Element) -&gt; None\n</code></pre> <p>Run the tree processor.</p> <p>Parameters:</p> <ul> <li> <code>root</code>               (<code>Element</code>)           \u2013            <p>The root element of the tree.</p> </li> </ul> Source code in <code>src/mkdocs_autorefs/_internal/references.py</code> <pre><code>def run(self, root: Element) -&gt; None:\n    \"\"\"Run the tree processor.\n\n    Arguments:\n        root: The root element of the tree.\n    \"\"\"\n    if self._plugin.current_page is not None:\n        pending_anchors = _PendingAnchors(self._plugin)\n        self._scan_anchors(root, pending_anchors)\n        pending_anchors.flush()\n</code></pre>"},{"location":"reference/api/#mkdocs_autorefs.AutorefsConfig","title":"AutorefsConfig","text":"<p>               Bases: <code>Config</code></p> <p>Configuration options for the <code>autorefs</code> plugin.</p> <p>Attributes:</p> <ul> <li> <code>link_titles</code>               (<code>bool | Literal['auto', 'external']</code>)           \u2013            <p>Whether to set titles on links.</p> </li> <li> <code>resolve_closest</code>               (<code>bool</code>)           \u2013            <p>Whether to resolve an autoref to the closest URL when multiple URLs are found for an identifier.</p> </li> <li> <code>strip_title_tags</code>               (<code>bool | Literal['auto']</code>)           \u2013            <p>Whether to strip HTML tags from link titles.</p> </li> </ul>"},{"location":"reference/api/#mkdocs_autorefs.AutorefsConfig.link_titles","title":"link_titles  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>link_titles: bool | Literal[\"auto\", \"external\"] = Choice(\n    (True, False, \"auto\", \"external\"), default=\"auto\"\n)\n</code></pre> <p>Whether to set titles on links.</p> <p>Such title attributes are displayed as tooltips when hovering over the links.</p> <ul> <li><code>\"auto\"</code>: autorefs will detect whether the instant preview feature of Material for MkDocs is enabled,     and set titles on external links when it is, all links if it is not.</li> <li><code>\"external\"</code>: autorefs will set titles on external links only.</li> <li><code>True</code>: autorefs will set titles on all links.</li> <li><code>False</code>: autorefs will not set any title attributes on links.</li> </ul> <p>Titles are only set when they are different from the link's text. Titles are constructed from the linked heading's original title, optionally appending the identifier for API objects.</p>"},{"location":"reference/api/#mkdocs_autorefs.AutorefsConfig.resolve_closest","title":"resolve_closest  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>resolve_closest: bool = Type(bool, default=False)\n</code></pre> <p>Whether to resolve an autoref to the closest URL when multiple URLs are found for an identifier.</p> <p>By closest, we mean a combination of \"relative to the current page\" and \"shortest distance from the current page\".</p> <p>For example, if you link to identifier <code>hello</code> from page <code>foo/bar/</code>, and the identifier is found in <code>foo/</code>, <code>foo/baz/</code> and <code>foo/bar/baz/qux/</code> pages, autorefs will resolve to <code>foo/bar/baz/qux</code>, which is the only URL relative to <code>foo/bar/</code>.</p> <p>If multiple URLs are equally close, autorefs will resolve to the first of these equally close URLs. If autorefs cannot find any URL that is close to the current page, it will log a warning and resolve to the first URL found.</p> <p>When false and multiple URLs are found for an identifier, autorefs will log a warning and resolve to the first URL.</p>"},{"location":"reference/api/#mkdocs_autorefs.AutorefsConfig.strip_title_tags","title":"strip_title_tags  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>strip_title_tags: bool | Literal[\"auto\"] = Choice(\n    (True, False, \"auto\"), default=\"auto\"\n)\n</code></pre> <p>Whether to strip HTML tags from link titles.</p> <p>Some themes support HTML in link titles, but others do not.</p> <ul> <li><code>\"auto\"</code>: strip tags unless the Material for MkDocs theme is detected.</li> </ul>"},{"location":"reference/api/#mkdocs_autorefs.AutorefsExtension","title":"AutorefsExtension","text":"<pre><code>AutorefsExtension(\n    plugin: AutorefsPlugin | None = None, **kwargs: Any\n)\n</code></pre> <p>               Bases: <code>Extension</code></p> <p>Markdown extension that transforms unresolved references into auto-references.</p> <p>Auto-references are then resolved later by the MkDocs plugin.</p> <p>This extension also scans Markdown anchors (<code>[](){#some-id}</code>) to register them with the MkDocs plugin.</p> <p>Parameters:</p> <ul> <li> <code>plugin</code>               (<code>AutorefsPlugin | None</code>, default:                   <code>None</code> )           \u2013            <p>An optional reference to the autorefs plugin (to pass it to the anchor scanner tree processor).</p> </li> <li> <code>**kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Keyword arguments passed to the base constructor.</p> </li> </ul> Referenced by: <ul> <li> <code></code>\u00a0mkdocs_autorefs <code></code>\u00a0AutorefsPlugin <code></code>\u00a0on_config </li> </ul> <p>Methods:</p> <ul> <li> <code>extendMarkdown</code>             \u2013              <p>Register the extension.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>plugin</code>           \u2013            <p>A reference to the autorefs plugin.</p> </li> </ul> Source code in <code>src/mkdocs_autorefs/_internal/references.py</code> <pre><code>def __init__(\n    self,\n    plugin: AutorefsPlugin | None = None,\n    **kwargs: Any,\n) -&gt; None:\n    \"\"\"Initialize the Markdown extension.\n\n    Parameters:\n        plugin: An optional reference to the autorefs plugin (to pass it to the anchor scanner tree processor).\n        **kwargs: Keyword arguments passed to the [base constructor][markdown.Extension].\n    \"\"\"\n    super().__init__(**kwargs)\n    self.plugin = plugin\n    \"\"\"A reference to the autorefs plugin.\"\"\"\n</code></pre>"},{"location":"reference/api/#mkdocs_autorefs.AutorefsExtension.plugin","title":"plugin  <code>instance-attribute</code>","text":"<pre><code>plugin = plugin\n</code></pre> <p>A reference to the autorefs plugin.</p>"},{"location":"reference/api/#mkdocs_autorefs.AutorefsExtension.extendMarkdown","title":"extendMarkdown","text":"<pre><code>extendMarkdown(md: Markdown) -&gt; None\n</code></pre> <p>Register the extension.</p> <p>Add an instance of our <code>AutorefsInlineProcessor</code> to the Markdown parser. Also optionally add an instance of our <code>AnchorScannerTreeProcessor</code> and <code>BacklinksTreeProcessor</code> to the Markdown parser if a reference to the autorefs plugin was passed to this extension.</p> <p>Parameters:</p> <ul> <li> <code>md</code>               (<code>Markdown</code>)           \u2013            <p>A <code>markdown.Markdown</code> instance.</p> </li> </ul> Source code in <code>src/mkdocs_autorefs/_internal/references.py</code> <pre><code>def extendMarkdown(self, md: Markdown) -&gt; None:  # noqa: N802 (casing: parent method's name)\n    \"\"\"Register the extension.\n\n    Add an instance of our [`AutorefsInlineProcessor`][mkdocs_autorefs.AutorefsInlineProcessor] to the Markdown parser.\n    Also optionally add an instance of our [`AnchorScannerTreeProcessor`][mkdocs_autorefs.AnchorScannerTreeProcessor]\n    and [`BacklinksTreeProcessor`][mkdocs_autorefs.BacklinksTreeProcessor] to the Markdown parser\n    if a reference to the autorefs plugin was passed to this extension.\n\n    Arguments:\n        md: A `markdown.Markdown` instance.\n    \"\"\"\n    md.inlinePatterns.register(\n        AutorefsInlineProcessor(md),\n        AutorefsInlineProcessor.name,\n        priority=168,  # Right after markdown.inlinepatterns.ReferenceInlineProcessor\n    )\n    if self.plugin is not None:\n        # Markdown anchors require the `attr_list` extension.\n        if self.plugin.scan_toc and \"attr_list\" in md.treeprocessors:\n            _log_enabling_markdown_anchors()\n            md.treeprocessors.register(\n                AnchorScannerTreeProcessor(self.plugin, md),\n                AnchorScannerTreeProcessor.name,\n                priority=0,\n            )\n        # Backlinks require IDs on headings, which are either set by `toc`,\n        # or manually by the user with `attr_list`.\n        if self.plugin.record_backlinks and (\"attr_list\" in md.treeprocessors or \"toc\" in md.treeprocessors):\n            _log_enabling_backlinks()\n            md.treeprocessors.register(\n                BacklinksTreeProcessor(self.plugin, md),\n                BacklinksTreeProcessor.name,\n                priority=0,\n            )\n</code></pre>"},{"location":"reference/api/#mkdocs_autorefs.AutorefsHookInterface","title":"AutorefsHookInterface","text":"<p>               Bases: <code>ABC</code></p> <p>An interface for hooking into how AutoRef handles inline references.</p> <p>Classes:</p> <ul> <li> <code>Context</code>           \u2013            <p>The context around an auto-reference.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>expand_identifier</code>             \u2013              <p>Expand an identifier in a given context.</p> </li> <li> <code>get_context</code>             \u2013              <p>Get the current context.</p> </li> </ul>"},{"location":"reference/api/#mkdocs_autorefs.AutorefsHookInterface.Context","title":"Context  <code>dataclass</code>","text":"<pre><code>Context(\n    domain: str,\n    role: str,\n    origin: str,\n    filepath: str | Path,\n    lineno: int,\n)\n</code></pre> <p>The context around an auto-reference.</p> <p>Methods:</p> <ul> <li> <code>as_dict</code>             \u2013              <p>Convert the context to a dictionary of HTML attributes.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>domain</code>               (<code>str</code>)           \u2013            <p>A domain like <code>py</code> or <code>js</code>.</p> </li> <li> <code>filepath</code>               (<code>str | Path</code>)           \u2013            <p>The path to the file containing the autoref.</p> </li> <li> <code>lineno</code>               (<code>int</code>)           \u2013            <p>The line number in the file containing the autoref.</p> </li> <li> <code>origin</code>               (<code>str</code>)           \u2013            <p>The origin of an autoref (an object identifier).</p> </li> <li> <code>role</code>               (<code>str</code>)           \u2013            <p>A role like <code>class</code> or <code>function</code>.</p> </li> </ul>"},{"location":"reference/api/#mkdocs_autorefs.AutorefsHookInterface.Context.domain","title":"domain  <code>instance-attribute</code>","text":"<pre><code>domain: str\n</code></pre> <p>A domain like <code>py</code> or <code>js</code>.</p>"},{"location":"reference/api/#mkdocs_autorefs.AutorefsHookInterface.Context.filepath","title":"filepath  <code>instance-attribute</code>","text":"<pre><code>filepath: str | Path\n</code></pre> <p>The path to the file containing the autoref.</p>"},{"location":"reference/api/#mkdocs_autorefs.AutorefsHookInterface.Context.lineno","title":"lineno  <code>instance-attribute</code>","text":"<pre><code>lineno: int\n</code></pre> <p>The line number in the file containing the autoref.</p>"},{"location":"reference/api/#mkdocs_autorefs.AutorefsHookInterface.Context.origin","title":"origin  <code>instance-attribute</code>","text":"<pre><code>origin: str\n</code></pre> <p>The origin of an autoref (an object identifier).</p>"},{"location":"reference/api/#mkdocs_autorefs.AutorefsHookInterface.Context.role","title":"role  <code>instance-attribute</code>","text":"<pre><code>role: str\n</code></pre> <p>A role like <code>class</code> or <code>function</code>.</p>"},{"location":"reference/api/#mkdocs_autorefs.AutorefsHookInterface.Context.as_dict","title":"as_dict","text":"<pre><code>as_dict() -&gt; dict[str, str]\n</code></pre> <p>Convert the context to a dictionary of HTML attributes.</p> Source code in <code>src/mkdocs_autorefs/_internal/references.py</code> <pre><code>def as_dict(self) -&gt; dict[str, str]:\n    \"\"\"Convert the context to a dictionary of HTML attributes.\"\"\"\n    return {\n        \"domain\": self.domain,\n        \"role\": self.role,\n        \"origin\": self.origin,\n        \"filepath\": str(self.filepath),\n        \"lineno\": str(self.lineno),\n    }\n</code></pre>"},{"location":"reference/api/#mkdocs_autorefs.AutorefsHookInterface.expand_identifier","title":"expand_identifier  <code>abstractmethod</code>","text":"<pre><code>expand_identifier(identifier: str) -&gt; str\n</code></pre> <p>Expand an identifier in a given context.</p> <p>Parameters:</p> <ul> <li> <code>identifier</code>               (<code>str</code>)           \u2013            <p>The identifier to expand.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The expanded identifier.</p> </li> </ul> Source code in <code>src/mkdocs_autorefs/_internal/references.py</code> <pre><code>@abstractmethod\ndef expand_identifier(self, identifier: str) -&gt; str:\n    \"\"\"Expand an identifier in a given context.\n\n    Parameters:\n        identifier: The identifier to expand.\n\n    Returns:\n        The expanded identifier.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/api/#mkdocs_autorefs.AutorefsHookInterface.get_context","title":"get_context  <code>abstractmethod</code>","text":"<pre><code>get_context() -&gt; Context\n</code></pre> <p>Get the current context.</p> <p>Returns:</p> <ul> <li> <code>Context</code>           \u2013            <p>The current context.</p> </li> </ul> Source code in <code>src/mkdocs_autorefs/_internal/references.py</code> <pre><code>@abstractmethod\ndef get_context(self) -&gt; AutorefsHookInterface.Context:\n    \"\"\"Get the current context.\n\n    Returns:\n        The current context.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/api/#mkdocs_autorefs.AutorefsInlineProcessor","title":"AutorefsInlineProcessor","text":"<pre><code>AutorefsInlineProcessor(*args: Any, **kwargs: Any)\n</code></pre> <p>               Bases: <code>ReferenceInlineProcessor</code></p> <p>A Markdown extension to handle inline references.</p> Referenced by: <ul> <li> <code></code>\u00a0mkdocs_autorefs <code></code>\u00a0AutorefsExtension <code></code>\u00a0extendMarkdown </li> </ul> <p>Methods:</p> <ul> <li> <code>handleMatch</code>             \u2013              <p>Handle an element that matched.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>hook</code>               (<code>AutorefsHookInterface | None</code>)           \u2013            <p>The hook to use for expanding identifiers or adding context to autorefs.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The name of the inline processor.</p> </li> </ul> Source code in <code>src/mkdocs_autorefs/_internal/references.py</code> <pre><code>def __init__(self, *args: Any, **kwargs: Any) -&gt; None:\n    super().__init__(REFERENCE_RE, *args, **kwargs)\n</code></pre>"},{"location":"reference/api/#mkdocs_autorefs.AutorefsInlineProcessor.hook","title":"hook  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>hook: AutorefsHookInterface | None = None\n</code></pre> <p>The hook to use for expanding identifiers or adding context to autorefs.</p>"},{"location":"reference/api/#mkdocs_autorefs.AutorefsInlineProcessor.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name: str = 'mkdocs-autorefs'\n</code></pre> <p>The name of the inline processor.</p>"},{"location":"reference/api/#mkdocs_autorefs.AutorefsInlineProcessor.handleMatch","title":"handleMatch","text":"<pre><code>handleMatch(\n    m: Match[str], data: str\n) -&gt; tuple[Element | None, int | None, int | None]\n</code></pre> <p>Handle an element that matched.</p> <p>Parameters:</p> <ul> <li> <code>m</code>               (<code>Match[str]</code>)           \u2013            <p>The match object.</p> </li> <li> <code>data</code>               (<code>str</code>)           \u2013            <p>The matched data.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>tuple[Element | None, int | None, int | None]</code>           \u2013            <p>A new element or a tuple.</p> </li> </ul> Source code in <code>src/mkdocs_autorefs/_internal/references.py</code> <pre><code>def handleMatch(self, m: Match[str], data: str) -&gt; tuple[Element | None, int | None, int | None]:  # type: ignore[override]  # noqa: N802\n    \"\"\"Handle an element that matched.\n\n    Arguments:\n        m: The match object.\n        data: The matched data.\n\n    Returns:\n        A new element or a tuple.\n    \"\"\"\n    text, index, handled = self.getText(data, m.end(0))\n    if not handled:\n        return None, None, None\n\n    identifier, slug, end, handled = self._eval_id(data, index, text)\n    if not handled or identifier is None:\n        return None, None, None\n\n    if slug is None and re.search(r\"[\\x00-\\x1f]\", identifier):\n        # Do nothing if the matched reference still contains control characters (from 0 to 31 included)\n        # that weren't unstashed when trying to compute a slug of the title.\n        return None, m.start(0), end\n\n    return self._make_tag(identifier, text, slug=slug), m.start(0), end\n</code></pre>"},{"location":"reference/api/#mkdocs_autorefs.AutorefsPlugin","title":"AutorefsPlugin","text":"<pre><code>AutorefsPlugin()\n</code></pre> <p>               Bases: <code>BasePlugin[AutorefsConfig]</code></p> <p>The <code>autorefs</code> plugin for <code>mkdocs</code>.</p> <p>This plugin defines the following event hooks:</p> <ul> <li><code>on_config</code>, to configure itself</li> <li><code>on_page_markdown</code>, to set the current page in order for Markdown extension to use it</li> <li><code>on_env</code>, to apply cross-references once all pages have been rendered</li> </ul> <p>Check the Developing Plugins page of <code>mkdocs</code> for more information about its plugin system.</p> Used by: <ul> <li> <code></code>\u00a0mkdocs_autorefs <ul> <li> <code></code>\u00a0AnchorScannerTreeProcessor </li> <li> <code></code>\u00a0BacklinksTreeProcessor </li> </ul> </li> </ul> <p>Methods:</p> <ul> <li> <code>get_backlinks</code>             \u2013              <p>Return the backlinks to an identifier relative to the given URL.</p> </li> <li> <code>get_item_url</code>             \u2013              <p>Return a site-relative URL with anchor to the identifier, if it's present anywhere.</p> </li> <li> <code>map_urls</code>             \u2013              <p>Recurse on every anchor to map its ID to its absolute URL.</p> </li> <li> <code>on_config</code>             \u2013              <p>Instantiate our Markdown extension.</p> </li> <li> <code>on_env</code>             \u2013              <p>Apply cross-references and collect backlinks.</p> </li> <li> <code>on_page_content</code>             \u2013              <p>Map anchors to URLs.</p> </li> <li> <code>on_page_markdown</code>             \u2013              <p>Remember which page is the current one.</p> </li> <li> <code>register_anchor</code>             \u2013              <p>Register that an anchor corresponding to an identifier was encountered when rendering the page.</p> </li> <li> <code>register_url</code>             \u2013              <p>Register that the identifier should be turned into a link to this URL.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>current_page</code>               (<code>Page | None</code>)           \u2013            <p>The current page being processed.</p> </li> <li> <code>get_fallback_anchor</code>               (<code>Callable[[str], tuple[str, ...]] | None</code>)           \u2013            <p>Fallback anchors getter.</p> </li> <li> <code>legacy_refs</code>               (<code>bool</code>)           \u2013            <p>Whether to support legacy references.</p> </li> <li> <code>record_backlinks</code>               (<code>bool</code>)           \u2013            <p>Whether to record backlinks.</p> </li> <li> <code>scan_toc</code>               (<code>bool</code>)           \u2013            <p>Whether to scan the table of contents for identifiers to map to URLs.</p> </li> </ul> Source code in <code>src/mkdocs_autorefs/_internal/plugin.py</code> <pre><code>def __init__(self) -&gt; None:\n    \"\"\"Initialize the object.\"\"\"\n    super().__init__()\n\n    # The plugin uses three URL maps, one for \"primary\" URLs, one for \"secondary\" URLs,\n    # and one for \"absolute\" URLs.\n    #\n    # - A primary URL is an identifier that links to a specific anchor on a page.\n    # - A secondary URL is an alias of an identifier that links to the same anchor as the identifier's primary URL.\n    #   Primary URLs with these aliases as identifiers may or may not be rendered later.\n    # - An absolute URL is an identifier that links to an external resource.\n    #   These URLs are typically registered by mkdocstrings when loading object inventories.\n    #\n    # For example, mkdocstrings registers a primary URL for each heading rendered in a page.\n    # Then, for each alias of this heading's identifier, it registers a secondary URL.\n    #\n    # We need to keep track of whether an identifier is primary or secondary,\n    # to give it precedence when resolving cross-references.\n    # We wouldn't want to log a warning if there is a single primary URL and one or more secondary URLs,\n    # instead we want to use the primary URL without any warning.\n    #\n    # - A single primary URL mapped to an identifer? Use it.\n    # - Multiple primary URLs mapped to an identifier? Use the first one, or closest one if configured as such.\n    # - No primary URL mapped to an identifier, but a secondary URL mapped? Use it.\n    # - Multiple secondary URLs mapped to an identifier? Use the first one, or closest one if configured as such.\n    # - No secondary URL mapped to an identifier? Try using absolute URLs\n    #   (typically registered by loading inventories in mkdocstrings).\n    #\n    # This logic unfolds in `_get_item_url`.\n    self._primary_url_map: dict[str, list[str]] = {}\n    self._secondary_url_map: dict[str, list[str]] = {}\n    self._title_map: dict[str, str] = {}\n    self._breadcrumbs_map: dict[str, BacklinkCrumb] = {}\n    self._abs_url_map: dict[str, str] = {}\n    self._backlinks: dict[str, dict[str, set[str]]] = defaultdict(lambda: defaultdict(set))\n    # YORE: Bump 2: Remove line.\n    self._get_fallback_anchor: Callable[[str], tuple[str, ...]] | None = None\n    # YORE: Bump 2: Remove line.\n    self._url_to_page: dict[str, Page] = {}\n\n    self._link_titles: bool | Literal[\"external\"] = True\n    self._strip_title_tags: bool = False\n</code></pre>"},{"location":"reference/api/#mkdocs_autorefs.AutorefsPlugin.current_page","title":"current_page  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>current_page: Page | None = None\n</code></pre> <p>The current page being processed.</p>"},{"location":"reference/api/#mkdocs_autorefs.AutorefsPlugin.get_fallback_anchor","title":"get_fallback_anchor  <code>property</code> <code>writable</code>","text":"<pre><code>get_fallback_anchor: Callable[[str], tuple[str, ...]] | None\n</code></pre> <p>Fallback anchors getter.</p>"},{"location":"reference/api/#mkdocs_autorefs.AutorefsPlugin.legacy_refs","title":"legacy_refs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>legacy_refs: bool = True\n</code></pre> <p>Whether to support legacy references.</p>"},{"location":"reference/api/#mkdocs_autorefs.AutorefsPlugin.record_backlinks","title":"record_backlinks  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>record_backlinks: bool = False\n</code></pre> <p>Whether to record backlinks.</p>"},{"location":"reference/api/#mkdocs_autorefs.AutorefsPlugin.scan_toc","title":"scan_toc  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>scan_toc: bool = True\n</code></pre> <p>Whether to scan the table of contents for identifiers to map to URLs.</p>"},{"location":"reference/api/#mkdocs_autorefs.AutorefsPlugin.get_backlinks","title":"get_backlinks","text":"<pre><code>get_backlinks(\n    *identifiers: str, from_url: str\n) -&gt; dict[str, set[Backlink]]\n</code></pre> <p>Return the backlinks to an identifier relative to the given URL.</p> <p>Parameters:</p> <ul> <li> <code>*identifiers</code>               (<code>str</code>, default:                   <code>()</code> )           \u2013            <p>The identifiers to get backlinks for.</p> </li> <li> <code>from_url</code>               (<code>str</code>)           \u2013            <p>The URL of the page where backlinks are rendered.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, set[Backlink]]</code>           \u2013            <p>A dictionary of backlinks, with the type of reference as key and a set of backlinks as value.</p> </li> <li> <code>dict[str, set[Backlink]]</code>           \u2013            <p>Each backlink is a tuple of (URL, title) tuples forming navigation breadcrumbs.</p> </li> </ul> Source code in <code>src/mkdocs_autorefs/_internal/plugin.py</code> <pre><code>def get_backlinks(self, *identifiers: str, from_url: str) -&gt; dict[str, set[Backlink]]:\n    \"\"\"Return the backlinks to an identifier relative to the given URL.\n\n    Arguments:\n        *identifiers: The identifiers to get backlinks for.\n        from_url: The URL of the page where backlinks are rendered.\n\n    Returns:\n        A dictionary of backlinks, with the type of reference as key and a set of backlinks as value.\n        Each backlink is a tuple of (URL, title) tuples forming navigation breadcrumbs.\n    \"\"\"\n    relative_backlinks: dict[str, set[Backlink]] = defaultdict(set)\n    for identifier in set(identifiers):\n        backlinks = self._backlinks.get(identifier, {})\n        for backlink_type, backlink_urls in backlinks.items():\n            for backlink_url in backlink_urls:\n                relative_backlinks[backlink_type].add(self._get_backlink(from_url, backlink_url))\n    return relative_backlinks\n</code></pre>"},{"location":"reference/api/#mkdocs_autorefs.AutorefsPlugin.get_item_url","title":"get_item_url","text":"<pre><code>get_item_url(\n    identifier: str,\n    from_url: str | None = None,\n    fallback: Callable[[str], Sequence[str]] | None = None,\n) -&gt; tuple[str, str | None]\n</code></pre> <p>Return a site-relative URL with anchor to the identifier, if it's present anywhere.</p> <p>Parameters:</p> <ul> <li> <code>identifier</code>               (<code>str</code>)           \u2013            <p>The anchor (without '#').</p> </li> <li> <code>from_url</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>The URL of the base page, from which we link towards the targeted pages.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>tuple[str, str | None]</code>           \u2013            <p>A site-relative URL.</p> </li> </ul> Referenced by: <ul> <li> <code></code>\u00a0mkdocs_autorefs <ul> <li> <code></code>\u00a0fix_ref </li> <li> <code></code>\u00a0fix_refs </li> </ul> </li> </ul> Source code in <code>src/mkdocs_autorefs/_internal/plugin.py</code> <pre><code>def get_item_url(\n    self,\n    identifier: str,\n    from_url: str | None = None,\n    # YORE: Bump 2: Remove line.\n    fallback: Callable[[str], Sequence[str]] | None = None,\n) -&gt; tuple[str, str | None]:\n    \"\"\"Return a site-relative URL with anchor to the identifier, if it's present anywhere.\n\n    Arguments:\n        identifier: The anchor (without '#').\n        from_url: The URL of the base page, from which we link towards the targeted pages.\n\n    Returns:\n        A site-relative URL.\n    \"\"\"\n    # YORE: Bump 2: Replace `, fallback` with `` within line.\n    url = self._get_item_url(identifier, from_url, fallback)\n    title = self._title_map.get(url) or None\n    if from_url is not None:\n        parsed = urlsplit(url)\n        if not parsed.scheme and not parsed.netloc:\n            url = relative_url(from_url, url)\n    return url, title\n</code></pre>"},{"location":"reference/api/#mkdocs_autorefs.AutorefsPlugin.map_urls","title":"map_urls","text":"<pre><code>map_urls(page: Page, anchor: AnchorLink) -&gt; None\n</code></pre> <p>Recurse on every anchor to map its ID to its absolute URL.</p> <p>This method populates <code>self._primary_url_map</code> by side-effect.</p> <p>Parameters:</p> <ul> <li> <code>page</code>               (<code>Page</code>)           \u2013            <p>The page containing the anchors.</p> </li> <li> <code>anchor</code>               (<code>AnchorLink</code>)           \u2013            <p>The anchor to process and to recurse on.</p> </li> </ul> Source code in <code>src/mkdocs_autorefs/_internal/plugin.py</code> <pre><code>def map_urls(self, page: Page, anchor: AnchorLink) -&gt; None:\n    \"\"\"Recurse on every anchor to map its ID to its absolute URL.\n\n    This method populates `self._primary_url_map` by side-effect.\n\n    Arguments:\n        page: The page containing the anchors.\n        anchor: The anchor to process and to recurse on.\n    \"\"\"\n    return self._map_urls(page, anchor)\n</code></pre>"},{"location":"reference/api/#mkdocs_autorefs.AutorefsPlugin.on_config","title":"on_config","text":"<pre><code>on_config(config: MkDocsConfig) -&gt; MkDocsConfig | None\n</code></pre> <p>Instantiate our Markdown extension.</p> <p>Hook for the <code>on_config</code> event. In this hook, we instantiate our <code>AutorefsExtension</code> and add it to the list of Markdown extensions used by <code>mkdocs</code>.</p> <p>Parameters:</p> <ul> <li> <code>config</code>               (<code>MkDocsConfig</code>)           \u2013            <p>The MkDocs config object.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>MkDocsConfig | None</code>           \u2013            <p>The modified config.</p> </li> </ul> Source code in <code>src/mkdocs_autorefs/_internal/plugin.py</code> <pre><code>def on_config(self, config: MkDocsConfig) -&gt; MkDocsConfig | None:\n    \"\"\"Instantiate our Markdown extension.\n\n    Hook for the [`on_config` event](https://www.mkdocs.org/user-guide/plugins/#on_config).\n    In this hook, we instantiate our [`AutorefsExtension`][mkdocs_autorefs.AutorefsExtension]\n    and add it to the list of Markdown extensions used by `mkdocs`.\n\n    Arguments:\n        config: The MkDocs config object.\n\n    Returns:\n        The modified config.\n    \"\"\"\n    _log.debug(\"Adding AutorefsExtension to the list\")\n    config.markdown_extensions.append(AutorefsExtension(self))  # type: ignore[arg-type]\n\n    # YORE: Bump 2: Remove block.\n    # mkdocstrings still uses the `page` attribute as a string.\n    # Fortunately, it does so in f-strings, so we can simply patch the `__str__` method\n    # to render the URL.\n    Page.__str__ = lambda page: page.url  # type: ignore[method-assign,attr-defined]\n\n    if self.config.link_titles == \"auto\":\n        if getattr(config.theme, \"name\", None) == \"material\" and \"navigation.instant.preview\" in config.theme.get(\n            \"features\",\n            (),\n        ):\n            self._link_titles = \"external\"\n        else:\n            self._link_titles = True\n    else:\n        self._link_titles = self.config.link_titles\n\n    if self.config.strip_title_tags == \"auto\":\n        if getattr(config.theme, \"name\", None) == \"material\" and \"content.tooltips\" in config.theme.get(\n            \"features\",\n            (),\n        ):\n            self._strip_title_tags = False\n        else:\n            self._strip_title_tags = True\n    else:\n        self._strip_title_tags = self.config.strip_title_tags\n\n    return config\n</code></pre>"},{"location":"reference/api/#mkdocs_autorefs.AutorefsPlugin.on_env","title":"on_env","text":"<pre><code>on_env(\n    env: Environment,\n    /,\n    *,\n    config: MkDocsConfig,\n    files: Files,\n) -&gt; Environment\n</code></pre> <p>Apply cross-references and collect backlinks.</p> <p>Hook for the <code>on_env</code> event. In this hook, we try to fix unresolved references of the form <code>[title][identifier]</code> or <code>[identifier][]</code>. Doing that allows the user of <code>autorefs</code> to cross-reference objects in their documentation strings. It uses the native Markdown syntax so it's easy to remember and use.</p> <p>We log a warning for each reference that we couldn't map to an URL.</p> <p>We also collect backlinks at the same time. We fix cross-refs and collect backlinks in a single pass for performance reasons (we don't want to run the regular expression on each page twice).</p> <p>Parameters:</p> <ul> <li> <code>env</code>               (<code>Environment</code>)           \u2013            <p>The MkDocs environment.</p> </li> <li> <code>config</code>               (<code>MkDocsConfig</code>)           \u2013            <p>The MkDocs config object.</p> </li> <li> <code>files</code>               (<code>Files</code>)           \u2013            <p>The list of files in the MkDocs project.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Environment</code>           \u2013            <p>The unmodified environment.</p> </li> </ul> Referenced by: <ul> <li> <code></code>\u00a0mkdocs_autorefs <code></code>\u00a0AUTOREF_RE </li> </ul> Source code in <code>src/mkdocs_autorefs/_internal/plugin.py</code> <pre><code>@event_priority(-50)  # Late, after mkdocstrings has finished loading inventories.\ndef on_env(self, env: Environment, /, *, config: MkDocsConfig, files: Files) -&gt; Environment:  # noqa: ARG002\n    \"\"\"Apply cross-references and collect backlinks.\n\n    Hook for the [`on_env` event](https://www.mkdocs.org/user-guide/plugins/#on_env).\n    In this hook, we try to fix unresolved references of the form `[title][identifier]` or `[identifier][]`.\n    Doing that allows the user of `autorefs` to cross-reference objects in their documentation strings.\n    It uses the native Markdown syntax so it's easy to remember and use.\n\n    We log a warning for each reference that we couldn't map to an URL.\n\n    We also collect backlinks at the same time. We fix cross-refs and collect backlinks in a single pass\n    for performance reasons (we don't want to run the regular expression on each page twice).\n\n    Arguments:\n        env: The MkDocs environment.\n        config: The MkDocs config object.\n        files: The list of files in the MkDocs project.\n\n    Returns:\n        The unmodified environment.\n    \"\"\"\n    for file in files:\n        if file.page and file.page.content:\n            _log.debug(\"Applying cross-refs in page %s\", file.page.file.src_path)\n\n            # YORE: Bump 2: Replace `, fallback=self.get_fallback_anchor` with `` within line.\n            url_mapper = functools.partial(\n                self.get_item_url,\n                from_url=file.page.url,\n                fallback=self.get_fallback_anchor,\n            )\n            backlink_recorder = (\n                functools.partial(self._record_backlink, page_url=file.page.url) if self.record_backlinks else None\n            )\n            # YORE: Bump 2: Replace `, _legacy_refs=self.legacy_refs` with `` within line.\n            file.page.content, unmapped = fix_refs(\n                file.page.content,\n                url_mapper,\n                record_backlink=backlink_recorder,\n                link_titles=self._link_titles,\n                strip_title_tags=self._strip_title_tags,\n                _legacy_refs=self.legacy_refs,\n            )\n\n            if unmapped and _log.isEnabledFor(logging.WARNING):\n                for ref, context in unmapped:\n                    message = f\"from {context.filepath}:{context.lineno}: ({context.origin}) \" if context else \"\"\n                    _log.warning(\n                        f\"{file.page.file.src_path}: {message}Could not find cross-reference target '{ref}'\",\n                    )\n\n    return env\n</code></pre>"},{"location":"reference/api/#mkdocs_autorefs.AutorefsPlugin.on_page_content","title":"on_page_content","text":"<pre><code>on_page_content(\n    html: str, page: Page, **kwargs: Any\n) -&gt; str\n</code></pre> <p>Map anchors to URLs.</p> <p>Hook for the <code>on_page_content</code> event. In this hook, we map the IDs of every anchor found in the table of contents to the anchors absolute URLs. This mapping will be used later to fix unresolved reference of the form <code>[title][identifier]</code> or <code>[identifier][]</code>.</p> <p>Parameters:</p> <ul> <li> <code>html</code>               (<code>str</code>)           \u2013            <p>HTML converted from Markdown.</p> </li> <li> <code>page</code>               (<code>Page</code>)           \u2013            <p>The related MkDocs page instance.</p> </li> <li> <code>kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional arguments passed by MkDocs.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The same HTML. We only use this hook to map anchors to URLs.</p> </li> </ul> Source code in <code>src/mkdocs_autorefs/_internal/plugin.py</code> <pre><code>def on_page_content(self, html: str, page: Page, **kwargs: Any) -&gt; str:  # noqa: ARG002\n    \"\"\"Map anchors to URLs.\n\n    Hook for the [`on_page_content` event](https://www.mkdocs.org/user-guide/plugins/#on_page_content).\n    In this hook, we map the IDs of every anchor found in the table of contents to the anchors absolute URLs.\n    This mapping will be used later to fix unresolved reference of the form `[title][identifier]` or\n    `[identifier][]`.\n\n    Arguments:\n        html: HTML converted from Markdown.\n        page: The related MkDocs page instance.\n        kwargs: Additional arguments passed by MkDocs.\n\n    Returns:\n        The same HTML. We only use this hook to map anchors to URLs.\n    \"\"\"\n    self.current_page = page\n    # Collect `std`-domain URLs.\n    if self.scan_toc:\n        _log.debug(\"Mapping identifiers to URLs for page %s\", page.file.src_path)\n        for item in page.toc.items:\n            self.map_urls(page, item)\n    return html\n</code></pre>"},{"location":"reference/api/#mkdocs_autorefs.AutorefsPlugin.on_page_markdown","title":"on_page_markdown","text":"<pre><code>on_page_markdown(\n    markdown: str, page: Page, **kwargs: Any\n) -&gt; str\n</code></pre> <p>Remember which page is the current one.</p> <p>Parameters:</p> <ul> <li> <code>markdown</code>               (<code>str</code>)           \u2013            <p>Input Markdown.</p> </li> <li> <code>page</code>               (<code>Page</code>)           \u2013            <p>The related MkDocs page instance.</p> </li> <li> <code>kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional arguments passed by MkDocs.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The same Markdown. We only use this hook to keep a reference to the current page URL, used during Markdown conversion by the anchor scanner tree processor.</p> </li> </ul> Source code in <code>src/mkdocs_autorefs/_internal/plugin.py</code> <pre><code>def on_page_markdown(self, markdown: str, page: Page, **kwargs: Any) -&gt; str:  # noqa: ARG002\n    \"\"\"Remember which page is the current one.\n\n    Arguments:\n        markdown: Input Markdown.\n        page: The related MkDocs page instance.\n        kwargs: Additional arguments passed by MkDocs.\n\n    Returns:\n        The same Markdown. We only use this hook to keep a reference to the current page URL,\n            used during Markdown conversion by the anchor scanner tree processor.\n    \"\"\"\n    # YORE: Bump 2: Remove line.\n    self._url_to_page[page.url] = page\n    self.current_page = page\n    return markdown\n</code></pre>"},{"location":"reference/api/#mkdocs_autorefs.AutorefsPlugin.register_anchor","title":"register_anchor","text":"<pre><code>register_anchor(\n    page: Page,\n    identifier: str,\n    anchor: str | None = None,\n    *,\n    title: str | None = None,\n    primary: bool = True,\n) -&gt; None\n</code></pre> <p>Register that an anchor corresponding to an identifier was encountered when rendering the page.</p> <p>Parameters:</p> <ul> <li> <code>page</code>               (<code>Page</code>)           \u2013            <p>The page where the anchor was found.</p> </li> <li> <code>identifier</code>               (<code>str</code>)           \u2013            <p>The identifier to register.</p> </li> <li> <code>anchor</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>The anchor on the page, without <code>#</code>. If not provided, defaults to the identifier.</p> </li> <li> <code>title</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>The title of the anchor (optional).</p> </li> <li> <code>primary</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether this anchor is the primary one for the identifier.</p> </li> </ul> Source code in <code>src/mkdocs_autorefs/_internal/plugin.py</code> <pre><code>def register_anchor(\n    self,\n    page: Page,\n    identifier: str,\n    anchor: str | None = None,\n    *,\n    title: str | None = None,\n    primary: bool = True,\n) -&gt; None:\n    \"\"\"Register that an anchor corresponding to an identifier was encountered when rendering the page.\n\n    Arguments:\n        page: The page where the anchor was found.\n        identifier: The identifier to register.\n        anchor: The anchor on the page, without `#`. If not provided, defaults to the identifier.\n        title: The title of the anchor (optional).\n        primary: Whether this anchor is the primary one for the identifier.\n    \"\"\"\n    # YORE: Bump 2: Remove block.\n    if isinstance(page, str):\n        try:\n            page = self._url_to_page[page]\n        except KeyError:\n            page = self.current_page\n\n    url = f\"{page.url}#{anchor or identifier}\"\n    url_map = self._primary_url_map if primary else self._secondary_url_map\n    if identifier in url_map:\n        if url not in url_map[identifier]:\n            url_map[identifier].append(url)\n    else:\n        url_map[identifier] = [url]\n    if title and url not in self._title_map:\n        self._title_map[url] = title\n</code></pre>"},{"location":"reference/api/#mkdocs_autorefs.AutorefsPlugin.register_url","title":"register_url","text":"<pre><code>register_url(identifier: str, url: str) -&gt; None\n</code></pre> <p>Register that the identifier should be turned into a link to this URL.</p> <p>Parameters:</p> <ul> <li> <code>identifier</code>               (<code>str</code>)           \u2013            <p>The new identifier.</p> </li> <li> <code>url</code>               (<code>str</code>)           \u2013            <p>The absolute URL (including anchor, if needed) where this item can be found.</p> </li> </ul> Source code in <code>src/mkdocs_autorefs/_internal/plugin.py</code> <pre><code>def register_url(self, identifier: str, url: str) -&gt; None:\n    \"\"\"Register that the identifier should be turned into a link to this URL.\n\n    Arguments:\n        identifier: The new identifier.\n        url: The absolute URL (including anchor, if needed) where this item can be found.\n    \"\"\"\n    self._abs_url_map[identifier] = url\n</code></pre>"},{"location":"reference/api/#mkdocs_autorefs.Backlink","title":"Backlink  <code>dataclass</code>","text":"<pre><code>Backlink(crumbs: tuple[BacklinkCrumb, ...])\n</code></pre> <p>A backlink (list of breadcrumbs).</p> <p>Attributes:</p> <ul> <li> <code>crumbs</code>               (<code>tuple[BacklinkCrumb, ...]</code>)           \u2013            <p>The list of breadcrumbs.</p> </li> </ul>"},{"location":"reference/api/#mkdocs_autorefs.Backlink.crumbs","title":"crumbs  <code>instance-attribute</code>","text":"<pre><code>crumbs: tuple[BacklinkCrumb, ...]\n</code></pre> <p>The list of breadcrumbs.</p>"},{"location":"reference/api/#mkdocs_autorefs.BacklinkCrumb","title":"BacklinkCrumb  <code>dataclass</code>","text":"<pre><code>BacklinkCrumb(\n    title: str,\n    url: str,\n    parent: BacklinkCrumb | None = None,\n)\n</code></pre> <p>A navigation breadcrumb for a backlink.</p> <p>Methods:</p> <ul> <li> <code>__eq__</code>             \u2013              <p>Compare URLs for equality.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>parent</code>               (<code>BacklinkCrumb | None</code>)           \u2013            <p>The parent breadcrumb.</p> </li> <li> <code>title</code>               (<code>str</code>)           \u2013            <p>The title of the breadcrumb.</p> </li> <li> <code>url</code>               (<code>str</code>)           \u2013            <p>The URL of the breadcrumb.</p> </li> </ul>"},{"location":"reference/api/#mkdocs_autorefs.BacklinkCrumb.parent","title":"parent  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>parent: BacklinkCrumb | None = None\n</code></pre> <p>The parent breadcrumb.</p>"},{"location":"reference/api/#mkdocs_autorefs.BacklinkCrumb.title","title":"title  <code>instance-attribute</code>","text":"<pre><code>title: str\n</code></pre> <p>The title of the breadcrumb.</p>"},{"location":"reference/api/#mkdocs_autorefs.BacklinkCrumb.url","title":"url  <code>instance-attribute</code>","text":"<pre><code>url: str\n</code></pre> <p>The URL of the breadcrumb.</p>"},{"location":"reference/api/#mkdocs_autorefs.BacklinkCrumb.__eq__","title":"__eq__","text":"<pre><code>__eq__(value: object) -&gt; bool\n</code></pre> <p>Compare URLs for equality.</p> Source code in <code>src/mkdocs_autorefs/_internal/backlinks.py</code> <pre><code>def __eq__(self, value: object) -&gt; bool:\n    \"\"\"Compare URLs for equality.\"\"\"\n    if isinstance(value, BacklinkCrumb):\n        return self.url == value.url\n    return False\n</code></pre>"},{"location":"reference/api/#mkdocs_autorefs.BacklinksTreeProcessor","title":"BacklinksTreeProcessor","text":"<pre><code>BacklinksTreeProcessor(\n    plugin: AutorefsPlugin, md: Markdown | None = None\n)\n</code></pre> <p>               Bases: <code>Treeprocessor</code></p> <p>Enhance autorefs with <code>backlink-type</code> and <code>backlink-anchor</code> attributes.</p> <p>These attributes are then used later to register backlinks.</p> <p>Parameters:</p> <ul> <li> <code>plugin</code>               (<code>AutorefsPlugin</code>)           \u2013            <p>A reference to the autorefs plugin, to use its <code>register_anchor</code> method.</p> </li> </ul> Referenced by: <ul> <li> <code></code>\u00a0mkdocs_autorefs <code></code>\u00a0AutorefsExtension <code></code>\u00a0extendMarkdown </li> </ul> <p>Methods:</p> <ul> <li> <code>run</code>             \u2013              <p>Run the tree processor.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>initial_id</code>               (<code>str | None</code>)           \u2013            <p>The initial heading ID.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The name of the tree processor.</p> </li> </ul> Source code in <code>src/mkdocs_autorefs/_internal/backlinks.py</code> <pre><code>def __init__(self, plugin: AutorefsPlugin, md: Markdown | None = None) -&gt; None:\n    \"\"\"Initialize the tree processor.\n\n    Parameters:\n        plugin: A reference to the autorefs plugin, to use its `register_anchor` method.\n    \"\"\"\n    super().__init__(md)\n    self._plugin = plugin\n    self._last_heading_id: str | None = None\n</code></pre>"},{"location":"reference/api/#mkdocs_autorefs.BacklinksTreeProcessor.initial_id","title":"initial_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>initial_id: str | None = None\n</code></pre> <p>The initial heading ID.</p>"},{"location":"reference/api/#mkdocs_autorefs.BacklinksTreeProcessor.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name: str = 'mkdocs-autorefs-backlinks'\n</code></pre> <p>The name of the tree processor.</p>"},{"location":"reference/api/#mkdocs_autorefs.BacklinksTreeProcessor.run","title":"run","text":"<pre><code>run(root: Element) -&gt; None\n</code></pre> <p>Run the tree processor.</p> <p>Parameters:</p> <ul> <li> <code>root</code>               (<code>Element</code>)           \u2013            <p>The root element of the document.</p> </li> </ul> Source code in <code>src/mkdocs_autorefs/_internal/backlinks.py</code> <pre><code>def run(self, root: Element) -&gt; None:\n    \"\"\"Run the tree processor.\n\n    Arguments:\n        root: The root element of the document.\n    \"\"\"\n    if self._plugin.current_page is not None:\n        self._last_heading_id = self.initial_id\n        self._enhance_autorefs(root)\n</code></pre>"},{"location":"reference/api/#mkdocs_autorefs.fix_ref","title":"fix_ref","text":"<pre><code>fix_ref(\n    url_mapper: Callable[[str], tuple[str, str | None]],\n    unmapped: list[tuple[str, Context | None]],\n    record_backlink: Callable[[str, str, str], None]\n    | None = None,\n    *,\n    link_titles: bool | Literal[\"external\"] = True,\n    strip_title_tags: bool = False,\n) -&gt; Callable\n</code></pre> <p>Return a <code>repl</code> function for <code>re.sub</code>.</p> <p>In our context, we match Markdown references and replace them with HTML links.</p> <p>When the matched reference's identifier was not mapped to an URL, we append the identifier to the outer <code>unmapped</code> list. It generally means the user is trying to cross-reference an object that was not collected and rendered, making it impossible to link to it. We catch this exception in the caller to issue a warning.</p> <p>Parameters:</p> <ul> <li> <code>url_mapper</code>               (<code>Callable[[str], tuple[str, str | None]]</code>)           \u2013            <p>A callable that gets an object's site URL by its identifier, such as mkdocs_autorefs.AutorefsPlugin.get_item_url.</p> </li> <li> <code>unmapped</code>               (<code>list[tuple[str, Context | None]]</code>)           \u2013            <p>A list to store unmapped identifiers.</p> </li> <li> <code>record_backlink</code>               (<code>Callable[[str, str, str], None] | None</code>, default:                   <code>None</code> )           \u2013            <p>A callable to record backlinks.</p> </li> <li> <code>link_titles</code>               (<code>bool | Literal['external']</code>, default:                   <code>True</code> )           \u2013            <p>How to set HTML titles on links. Always (<code>True</code>), never (<code>False</code>), or external-only (<code>\"external\"</code>).</p> </li> <li> <code>strip_title_tags</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to strip HTML tags from link titles.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Callable</code>           \u2013            <p>The actual function accepting a <code>Match</code> object</p> </li> <li> <code>Callable</code>           \u2013            <p>and returning the replacement strings.</p> </li> </ul> Source code in <code>src/mkdocs_autorefs/_internal/references.py</code> <pre><code>def fix_ref(\n    url_mapper: Callable[[str], tuple[str, str | None]],\n    unmapped: list[tuple[str, AutorefsHookInterface.Context | None]],\n    record_backlink: Callable[[str, str, str], None] | None = None,\n    *,\n    link_titles: bool | Literal[\"external\"] = True,\n    strip_title_tags: bool = False,\n) -&gt; Callable:\n    \"\"\"Return a `repl` function for [`re.sub`](https://docs.python.org/3/library/re.html#re.sub).\n\n    In our context, we match Markdown references and replace them with HTML links.\n\n    When the matched reference's identifier was not mapped to an URL, we append the identifier to the outer\n    `unmapped` list. It generally means the user is trying to cross-reference an object that was not collected\n    and rendered, making it impossible to link to it. We catch this exception in the caller to issue a warning.\n\n    Arguments:\n        url_mapper: A callable that gets an object's site URL by its identifier,\n            such as [mkdocs_autorefs.AutorefsPlugin.get_item_url][].\n        unmapped: A list to store unmapped identifiers.\n        record_backlink: A callable to record backlinks.\n        link_titles: How to set HTML titles on links. Always (`True`), never (`False`), or external-only (`\"external\"`).\n        strip_title_tags: Whether to strip HTML tags from link titles.\n\n    Returns:\n        The actual function accepting a [`Match` object](https://docs.python.org/3/library/re.html#match-objects)\n        and returning the replacement strings.\n    \"\"\"\n\n    def inner(match: Match) -&gt; str:\n        title = match[\"title\"]\n        attrs = _html_attrs_parser.parse(f\"&lt;a {match['attrs']}&gt;\")\n        identifier: str = attrs[\"identifier\"]\n        slug = attrs.get(\"slug\", None)\n        optional = \"optional\" in attrs\n\n        identifiers = (identifier, slug) if slug else (identifier,)\n\n        if (\n            record_backlink\n            and (backlink_type := attrs.get(\"backlink-type\"))\n            and (backlink_anchor := attrs.get(\"backlink-anchor\"))\n        ):\n            record_backlink(identifier, backlink_type, backlink_anchor)\n\n        try:\n            url, original_title = _find_url(identifiers, url_mapper)\n        except KeyError:\n            if optional:\n                _log.debug(\"Unresolved optional cross-reference: %s\", identifier)\n                return f'&lt;span title=\"{identifier}\"&gt;{title}&lt;/span&gt;'\n            unmapped.append((identifier, attrs.context))\n            if title == identifier:\n                return f\"[{identifier}][]\"\n            if title == f\"&lt;code&gt;{identifier}&lt;/code&gt;\" and not slug:\n                return f\"[&lt;code&gt;{identifier}&lt;/code&gt;][]\"\n            return f\"[{title}][{identifier}]\"\n\n        parsed = urlsplit(url)\n        external = parsed.scheme or parsed.netloc\n\n        classes = (attrs.get(\"class\") or \"\").strip().split()\n        classes = [\"autorefs\", \"autorefs-external\" if external else \"autorefs-internal\", *classes]\n        class_attr = \" \".join(classes)\n\n        if remaining := attrs.remaining:\n            remaining = f\" {remaining}\"\n\n        title_attr = \"\"\n        if link_titles is True or (link_titles == \"external\" and external):\n            if optional:\n                # The `optional` attribute is generally only added by mkdocstrings handlers,\n                # for API objects, meaning we can and should append the full identifier.\n                tooltip = _tooltip(identifier, original_title, strip_tags=strip_title_tags)\n            else:\n                # Autorefs without `optional` are generally user-written ones,\n                # so we should only use the original title.\n                tooltip = original_title or \"\"\n\n            if tooltip and tooltip not in f\"&lt;code&gt;{title}&lt;/code&gt;\":\n                title_attr = f' title=\"{_html_tag_stripper.strip(tooltip) if strip_title_tags else escape(tooltip)}\"'\n\n        return f'&lt;a class=\"{class_attr}\"{title_attr} href=\"{escape(url)}\"{remaining}&gt;{title}&lt;/a&gt;'\n\n    return inner\n</code></pre>"},{"location":"reference/api/#mkdocs_autorefs.fix_refs","title":"fix_refs","text":"<pre><code>fix_refs(\n    html: str,\n    url_mapper: Callable[[str], tuple[str, str | None]],\n    *,\n    record_backlink: Callable[[str, str, str], None]\n    | None = None,\n    link_titles: bool | Literal[\"external\"] = True,\n    strip_title_tags: bool = False,\n    _legacy_refs: bool = True,\n) -&gt; tuple[str, list[tuple[str, Context | None]]]\n</code></pre> <p>Fix all references in the given HTML text.</p> <p>Parameters:</p> <ul> <li> <code>html</code>               (<code>str</code>)           \u2013            <p>The text to fix.</p> </li> <li> <code>url_mapper</code>               (<code>Callable[[str], tuple[str, str | None]]</code>)           \u2013            <p>A callable that gets an object's site URL by its identifier, such as mkdocs_autorefs.AutorefsPlugin.get_item_url.</p> </li> <li> <code>record_backlink</code>               (<code>Callable[[str, str, str], None] | None</code>, default:                   <code>None</code> )           \u2013            <p>A callable to record backlinks.</p> </li> <li> <code>link_titles</code>               (<code>bool | Literal['external']</code>, default:                   <code>True</code> )           \u2013            <p>How to set HTML titles on links. Always (<code>True</code>), never (<code>False</code>), or external-only (<code>\"external\"</code>).</p> </li> <li> <code>strip_title_tags</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to strip HTML tags from link titles.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>tuple[str, list[tuple[str, Context | None]]]</code>           \u2013            <p>The fixed HTML, and a list of unmapped identifiers (string and optional context).</p> </li> </ul> Source code in <code>src/mkdocs_autorefs/_internal/references.py</code> <pre><code>def fix_refs(\n    html: str,\n    url_mapper: Callable[[str], tuple[str, str | None]],\n    *,\n    record_backlink: Callable[[str, str, str], None] | None = None,\n    link_titles: bool | Literal[\"external\"] = True,\n    strip_title_tags: bool = False,\n    # YORE: Bump 2: Remove line.\n    _legacy_refs: bool = True,\n) -&gt; tuple[str, list[tuple[str, AutorefsHookInterface.Context | None]]]:\n    \"\"\"Fix all references in the given HTML text.\n\n    Arguments:\n        html: The text to fix.\n        url_mapper: A callable that gets an object's site URL by its identifier,\n            such as [mkdocs_autorefs.AutorefsPlugin.get_item_url][].\n        record_backlink: A callable to record backlinks.\n        link_titles: How to set HTML titles on links. Always (`True`), never (`False`), or external-only (`\"external\"`).\n        strip_title_tags: Whether to strip HTML tags from link titles.\n\n    Returns:\n        The fixed HTML, and a list of unmapped identifiers (string and optional context).\n    \"\"\"\n    unmapped: list[tuple[str, AutorefsHookInterface.Context | None]] = []\n    html = AUTOREF_RE.sub(\n        fix_ref(url_mapper, unmapped, record_backlink, link_titles=link_titles, strip_title_tags=strip_title_tags),\n        html,\n    )\n\n    # YORE: Bump 2: Remove block.\n    if _legacy_refs:\n        html = AUTO_REF_RE.sub(_legacy_fix_ref(url_mapper, unmapped), html)\n\n    return html, unmapped\n</code></pre>"},{"location":"reference/api/#mkdocs_autorefs.relative_url","title":"relative_url","text":"<pre><code>relative_url(url_a: str, url_b: str) -&gt; str\n</code></pre> <p>Compute the relative path from URL A to URL B.</p> <p>Parameters:</p> <ul> <li> <code>url_a</code>               (<code>str</code>)           \u2013            <p>URL A.</p> </li> <li> <code>url_b</code>               (<code>str</code>)           \u2013            <p>URL B.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The relative URL to go from A to B.</p> </li> </ul> Source code in <code>src/mkdocs_autorefs/_internal/references.py</code> <pre><code>def relative_url(url_a: str, url_b: str) -&gt; str:\n    \"\"\"Compute the relative path from URL A to URL B.\n\n    Arguments:\n        url_a: URL A.\n        url_b: URL B.\n\n    Returns:\n        The relative URL to go from A to B.\n    \"\"\"\n    parts_a = url_a.split(\"/\")\n    url_b, *rest = url_b.split(\"#\", 1)\n    anchor = rest[0] if rest else \"\"\n    parts_b = url_b.split(\"/\")\n\n    # Remove common left parts.\n    while parts_a and parts_b and parts_a[0] == parts_b[0]:\n        parts_a.pop(0)\n        parts_b.pop(0)\n\n    # Go up as many times as remaining a parts' depth.\n    levels = len(parts_a) - 1\n    parts_relative = [\"..\"] * levels + parts_b\n    relative = \"/\".join(parts_relative)\n    return f\"{relative}#{anchor}\"\n</code></pre>"},{"location":"coverage/","title":"Coverage report","text":""}]}